
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00002c5a  00002cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080010c  0080010c  00002d9a  2**0
                  ALLOC
  3 .stab         00002db4  00000000  00000000  00002d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f9  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aadc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 10 	call	0x219a	; 0x219a <main>
      8a:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ef       	ldi	r26, 0xF6	; 246
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ef       	ldi	r24, 0xF6	; 246
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
* [Arguments]: Pointer to structure of type UART_ConfigType To Specify Configuration
*              of UART Driver
* [Returns]: No Return Types
*******************************************************************************/
void UART_init(const UART_ConfigType* Config_ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	/* Set Bits number 3 in The Data size number in The bit UCSZ2 in Register UCSRB */
	UCSRB = (UCSRB & 0xFB) | (Config_ptr->Data_size & 0x04);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	98 2f       	mov	r25, r24
     b76:	9b 7f       	andi	r25, 0xFB	; 251
     b78:	eb 81       	ldd	r30, Y+3	; 0x03
     b7a:	fc 81       	ldd	r31, Y+4	; 0x04
     b7c:	80 81       	ld	r24, Z
     b7e:	84 70       	andi	r24, 0x04	; 4
     b80:	89 2b       	or	r24, r25
     b82:	8c 93       	st	X, r24

	/* To Write in Register UCSRC, Firstly we need to make URSEL with LOGIC HIGH */
	/* But the first 2 bits in Data size in the bits UCSZ1 and UCSZ0 to Specify the size of Data */
	UCSRC = (1 << URSEL) | (Config_ptr->Data_size << 1);
     b84:	a0 e4       	ldi	r26, 0x40	; 64
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	80 81       	ld	r24, Z
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	80 68       	ori	r24, 0x80	; 128
     b98:	8c 93       	st	X, r24

	/* Specify Parity bit Mode(Even/ Odd / Disabled) in Data frame */
	UCSRC = (UCSRC & 0xCF) | (Config_ptr->Parity_bit << 4);
     b9a:	a0 e4       	ldi	r26, 0x40	; 64
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e0 e4       	ldi	r30, 0x40	; 64
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	28 2f       	mov	r18, r24
     ba6:	2f 7c       	andi	r18, 0xCF	; 207
     ba8:	eb 81       	ldd	r30, Y+3	; 0x03
     baa:	fc 81       	ldd	r31, Y+4	; 0x04
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	82 95       	swap	r24
     bb4:	92 95       	swap	r25
     bb6:	90 7f       	andi	r25, 0xF0	; 240
     bb8:	98 27       	eor	r25, r24
     bba:	80 7f       	andi	r24, 0xF0	; 240
     bbc:	98 27       	eor	r25, r24
     bbe:	82 2b       	or	r24, r18
     bc0:	8c 93       	st	X, r24

	/* Specify number of stop bits in the Data frame */
	UCSRC = (UCSRC & 0xF7) | (Config_ptr->Stop_bit << 3);
     bc2:	a0 e4       	ldi	r26, 0x40	; 64
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e0 e4       	ldi	r30, 0x40	; 64
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	28 2f       	mov	r18, r24
     bce:	27 7f       	andi	r18, 0xF7	; 247
     bd0:	eb 81       	ldd	r30, Y+3	; 0x03
     bd2:	fc 81       	ldd	r31, Y+4	; 0x04
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	82 2b       	or	r24, r18
     be8:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_ptr->baud_rate * 8UL))) - 1);
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	83 81       	ldd	r24, Z+3	; 0x03
     bf0:	94 81       	ldd	r25, Z+4	; 0x04
     bf2:	a5 81       	ldd	r26, Z+5	; 0x05
     bf4:	b6 81       	ldd	r27, Z+6	; 0x06
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	aa 1f       	adc	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	aa 1f       	adc	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	aa 1f       	adc	r26, r26
     c0c:	bb 1f       	adc	r27, r27
     c0e:	9c 01       	movw	r18, r24
     c10:	ad 01       	movw	r20, r26
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	92 e1       	ldi	r25, 0x12	; 18
     c16:	aa e7       	ldi	r26, 0x7A	; 122
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__udivmodsi4>
     c22:	da 01       	movw	r26, r20
     c24:	c9 01       	movw	r24, r18
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     c2c:	e0 e4       	ldi	r30, 0x40	; 64
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	89 2f       	mov	r24, r25
     c36:	99 27       	eor	r25, r25
     c38:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c3a:	e9 e2       	ldi	r30, 0x29	; 41
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	80 83       	st	Z, r24
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <UART_sendByte>:
* [Description]: This Function Responsible for send byte to another UART Device
* [Arguments]: uint8 ---> Data that will be send
* [Returns]: No Return Types
*******************************************************************************/
void UART_sendByte(const uint8 data)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	89 83       	std	Y+1, r24	; 0x01
	/* Here This check if Transmitter Register is Empty or Not */
	/* If empty --> it can receive another byte and will exit from while loop and send data to UDR Register*/
	/* If not empty --> it will wait until Transmit Register to be empty to be able to send another byte without
	   Data overrun */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c5c:	eb e2       	ldi	r30, 0x2B	; 43
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	80 72       	andi	r24, 0x20	; 32
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	b9 f3       	breq	.-18     	; 0xc5c <UART_sendByte+0xc>

	/*Send The Required data to UART Register */
	UDR = data;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	80 83       	st	Z, r24
}
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <UART_recieveByte>:
* [Description]: This Function Responsible for receive byte to another UART Device
* [Arguments]: No Arguments
* [Returns]: No Return Types
*******************************************************************************/
uint8 UART_recieveByte(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	/* this while loop will stop when The reading of byte is completed ---> data already read */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	dc f7       	brge	.-10     	; 0xc86 <UART_recieveByte+0x8>

	//---> This will clear RX Flag after reading the Register
    return UDR;
     c90:	ec e2       	ldi	r30, 0x2C	; 44
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <UART_sendString>:
* [Description]: This Function Responsible for send string to another UART Device
* [Arguments]: Pointer to First character in the string
* [Returns]: No Return Types
*******************************************************************************/
void UART_sendString(const uint8 *Str)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <UART_sendString+0x6>
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	0e c0       	rjmp	.+28     	; 0xccc <UART_sendString+0x30>

	/* Loop until reach to the end of the string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	fc 01       	movw	r30, r24
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	80 81       	ld	r24, Z
     cc2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
		i++;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Loop until reach to the end of the string */
	while(Str[i] != '\0')
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	88 23       	and	r24, r24
     ce0:	39 f7       	brne	.-50     	; 0xcb0 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <UART_receiveString>:
* [Description]: This Function Responsible for receive string to another UART Device
* [Arguments]: Pointer to First character in the string
* [Returns]: No Return Types
*******************************************************************************/
void UART_receiveString(uint8 *Str)
{
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <UART_receiveString+0xa>
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	9b 83       	std	Y+3, r25	; 0x03
     d00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d02:	19 82       	std	Y+1, r1	; 0x01

	/* First Receive the First byte to check this byte is the end of string or not */
	Str[i] = UART_recieveByte();
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	8c 01       	movw	r16, r24
     d10:	02 0f       	add	r16, r18
     d12:	13 1f       	adc	r17, r19
     d14:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
     d18:	f8 01       	movw	r30, r16
     d1a:	80 83       	st	Z, r24
     d1c:	0f c0       	rjmp	.+30     	; 0xd3c <UART_receiveString+0x4e>

	/* Loop until string ends with the Special character that first user specified it */
	/* this character '#' is optional you can use any character instead of it*/
	while(Str[i] != '#')
	{
		i++;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	9b 81       	ldd	r25, Y+3	; 0x03
     d2e:	8c 01       	movw	r16, r24
     d30:	02 0f       	add	r16, r18
     d32:	13 1f       	adc	r17, r19
     d34:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
     d38:	f8 01       	movw	r30, r16
     d3a:	80 83       	st	Z, r24
	/* First Receive the First byte to check this byte is the end of string or not */
	Str[i] = UART_recieveByte();

	/* Loop until string ends with the Special character that first user specified it */
	/* this character '#' is optional you can use any character instead of it*/
	while(Str[i] != '#')
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	fc 01       	movw	r30, r24
     d48:	e2 0f       	add	r30, r18
     d4a:	f3 1f       	adc	r31, r19
     d4c:	80 81       	ld	r24, Z
     d4e:	83 32       	cpi	r24, 0x23	; 35
     d50:	31 f7       	brne	.-52     	; 0xd1e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* end the string received with null Terminator */
	Str[i] = '\0';
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	10 82       	st	Z, r1
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <__vector_7>:
static volatile void(*callBack_ptr)(void) = NULL;

/********************************************************************************
 *                       Interrupt Service Routines                             *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect){
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr != NULL){
     d9e:	80 91 0c 01 	lds	r24, 0x010C
     da2:	90 91 0d 01 	lds	r25, 0x010D
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	29 f0       	breq	.+10     	; 0xdb4 <__vector_7+0x40>
		(*callBack_ptr)();
     daa:	e0 91 0c 01 	lds	r30, 0x010C
     dae:	f0 91 0d 01 	lds	r31, 0x010D
     db2:	09 95       	icall
	}
}
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	ff 91       	pop	r31
     dba:	ef 91       	pop	r30
     dbc:	bf 91       	pop	r27
     dbe:	af 91       	pop	r26
     dc0:	9f 91       	pop	r25
     dc2:	8f 91       	pop	r24
     dc4:	7f 91       	pop	r23
     dc6:	6f 91       	pop	r22
     dc8:	5f 91       	pop	r21
     dca:	4f 91       	pop	r20
     dcc:	3f 91       	pop	r19
     dce:	2f 91       	pop	r18
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <TIMER1_init_Compare>:
* [Arguments]: Pointer to struct of type Timer1_ConfigType to set configuration that
*              Timer1 will operate on it
* [Returns]: No Return type
********************************************************************************/
void TIMER1_init_Compare(Timer1_ConfigType* Config_ptr)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <TIMER1_init_Compare+0x6>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize Timer1 With value that will start count according to this value*/
	TCNT1 = Config_ptr->Initial_value;
     de8:	ac e4       	ldi	r26, 0x4C	; 76
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e9 81       	ldd	r30, Y+1	; 0x01
     dee:	fa 81       	ldd	r31, Y+2	; 0x02
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	11 96       	adiw	r26, 0x01	; 1
     df6:	9c 93       	st	X, r25
     df8:	8e 93       	st	-X, r24

	/* Set Compare value that Timer will reach to it then, it backs count from 0*/
	OCR1A = Config_ptr->Compare_value;
     dfa:	aa e4       	ldi	r26, 0x4A	; 74
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	11 96       	adiw	r26, 0x01	; 1
     e08:	9c 93       	st	X, r25
     e0a:	8e 93       	st	-X, r24

	/* Enable Timer1 Interrupt*/
	TIMSK |= (1 << OCIE1A);
     e0c:	a9 e5       	ldi	r26, 0x59	; 89
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e9 e5       	ldi	r30, 0x59	; 89
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 61       	ori	r24, 0x10	; 16
     e18:	8c 93       	st	X, r24

	/****************************************************************************
	 * FOC1A : It will be set when Timer1 Operate in non PWM Mode
	 * Set First 2-bits From Mode Member to Specify which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_ptr->Mode & 0x03));
     e1a:	af e4       	ldi	r26, 0x4F	; 79
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ef e4       	ldi	r30, 0x4F	; 79
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	98 2f       	mov	r25, r24
     e26:	9c 7f       	andi	r25, 0xFC	; 252
     e28:	e9 81       	ldd	r30, Y+1	; 0x01
     e2a:	fa 81       	ldd	r31, Y+2	; 0x02
     e2c:	85 81       	ldd	r24, Z+5	; 0x05
     e2e:	83 70       	andi	r24, 0x03	; 3
     e30:	89 2b       	or	r24, r25
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	8c 93       	st	X, r24

	/****************************************************************************
	 * Set Pre-scaler value in the first 3-bits in TCCR1B Register that will specify which frequency Timer1 will Operate
	 * Set Last 2-bits From Mode Member to Specify Which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1B = ((TCCR1B & 0xF8) | (Config_ptr->Prescaler & 0x07)) | ((TCCR1B & 0xE7) | ((Config_ptr->Mode & 0x0C)<<1));
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	98 2f       	mov	r25, r24
     e42:	98 7f       	andi	r25, 0xF8	; 248
     e44:	e9 81       	ldd	r30, Y+1	; 0x01
     e46:	fa 81       	ldd	r31, Y+2	; 0x02
     e48:	84 81       	ldd	r24, Z+4	; 0x04
     e4a:	87 70       	andi	r24, 0x07	; 7
     e4c:	39 2f       	mov	r19, r25
     e4e:	38 2b       	or	r19, r24
     e50:	ee e4       	ldi	r30, 0x4E	; 78
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	28 2f       	mov	r18, r24
     e58:	27 7e       	andi	r18, 0xE7	; 231
     e5a:	e9 81       	ldd	r30, Y+1	; 0x01
     e5c:	fa 81       	ldd	r31, Y+2	; 0x02
     e5e:	85 81       	ldd	r24, Z+5	; 0x05
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	8c 70       	andi	r24, 0x0C	; 12
     e66:	90 70       	andi	r25, 0x00	; 0
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	82 2b       	or	r24, r18
     e6e:	83 2b       	or	r24, r19
     e70:	8c 93       	st	X, r24
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <TIMER1_deInit>:
* [Description]: Function disable and stop Timer1 driver
* [Arguments]: No arguments
* [Returns]: No Returns
********************************************************************************/
void TIMER1_deInit(void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer Register */
	TCCR1A = 0;
     e84:	ef e4       	ldi	r30, 0x4F	; 79
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	10 82       	st	Z, r1
	TCCR1B = 0;
     e8a:	ee e4       	ldi	r30, 0x4E	; 78
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	10 82       	st	Z, r1
	TCNT1 = 0;
     e90:	ec e4       	ldi	r30, 0x4C	; 76
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	11 82       	std	Z+1, r1	; 0x01
     e96:	10 82       	st	Z, r1
	/* Disable Interrupt */
	TIMSK &= ~(1 << OCIE1A);
     e98:	a9 e5       	ldi	r26, 0x59	; 89
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e9 e5       	ldi	r30, 0x59	; 89
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8c 93       	st	X, r24
}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <TIMER1_setCallback>:
* [Arguments]: Pointer that will point to passed Function that will be executed when
*              The interrupt(detection) occurs
* [Returns]: No Return type
********************************************************************************/
void TIMER1_setCallback(void(*a_ptr)(void))
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <TIMER1_setCallback+0x6>
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
	/* Make global variable points to same function to be called in ISR when an detection occur*/
	callBack_ptr = a_ptr;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	90 93 0d 01 	sts	0x010D, r25
     ec2:	80 93 0c 01 	sts	0x010C, r24
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <GPIO_setupPinDirection>:
/*
* Description:
* set Direction of any Pin in Passed Port_num (input or output)
* if Port_num or Pin_num are invalid, function will not handle the request
*/
void GPIO_setupPinDirection(uint8 Port_num , uint8 Pin_num , GPIO_PinDirectionType direction){
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <GPIO_setupPinDirection+0x6>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <GPIO_setupPinDirection+0x8>
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	6a 83       	std	Y+2, r22	; 0x02
     ee2:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_num >= NUM_OF_PORTS || Pin_num >= NUM_OF_PINS_PER_PORT)
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	08 f0       	brcs	.+2      	; 0xeec <GPIO_setupPinDirection+0x1c>
     eea:	d5 c0       	rjmp	.+426    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <GPIO_setupPinDirection+0x24>
     ef2:	d1 c0       	rjmp	.+418    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(Port_num){
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3d 83       	std	Y+5, r19	; 0x05
     efc:	2c 83       	std	Y+4, r18	; 0x04
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <GPIO_setupPinDirection+0x3a>
     f08:	43 c0       	rjmp	.+134    	; 0xf90 <GPIO_setupPinDirection+0xc0>
     f0a:	2c 81       	ldd	r18, Y+4	; 0x04
     f0c:	3d 81       	ldd	r19, Y+5	; 0x05
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	2c f4       	brge	.+10     	; 0xf1e <GPIO_setupPinDirection+0x4e>
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	9d 81       	ldd	r25, Y+5	; 0x05
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	71 f0       	breq	.+28     	; 0xf38 <GPIO_setupPinDirection+0x68>
     f1c:	bc c0       	rjmp	.+376    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <GPIO_setupPinDirection+0x5a>
     f28:	5f c0       	rjmp	.+190    	; 0xfe8 <GPIO_setupPinDirection+0x118>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	09 f4       	brne	.+2      	; 0xf36 <GPIO_setupPinDirection+0x66>
     f34:	85 c0       	rjmp	.+266    	; 0x1040 <GPIO_setupPinDirection+0x170>
     f36:	af c0       	rjmp	.+350    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction == PIN_INPUT){
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 23       	and	r24, r24
     f3c:	a9 f4       	brne	.+42     	; 0xf68 <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA,Pin_num);
     f3e:	aa e3       	ldi	r26, 0x3A	; 58
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ea e3       	ldi	r30, 0x3A	; 58
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <GPIO_setupPinDirection+0x8c>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <GPIO_setupPinDirection+0x88>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	97 c0       	rjmp	.+302    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,Pin_num);
     f68:	aa e3       	ldi	r26, 0x3A	; 58
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ea e3       	ldi	r30, 0x3A	; 58
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <GPIO_setupPinDirection+0xb6>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <GPIO_setupPinDirection+0xb2>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	83 c0       	rjmp	.+262    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_INPUT){
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 23       	and	r24, r24
     f94:	a9 f4       	brne	.+42     	; 0xfc0 <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB,Pin_num);
     f96:	a7 e3       	ldi	r26, 0x37	; 55
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e7 e3       	ldi	r30, 0x37	; 55
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_setupPinDirection+0xe4>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_setupPinDirection+0xe0>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	6b c0       	rjmp	.+214    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,Pin_num);
     fc0:	a7 e3       	ldi	r26, 0x37	; 55
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e7 e3       	ldi	r30, 0x37	; 55
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <GPIO_setupPinDirection+0x10e>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <GPIO_setupPinDirection+0x10a>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	57 c0       	rjmp	.+174    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_INPUT){
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	88 23       	and	r24, r24
     fec:	a9 f4       	brne	.+42     	; 0x1018 <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC,Pin_num);
     fee:	a4 e3       	ldi	r26, 0x34	; 52
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e4 e3       	ldi	r30, 0x34	; 52
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_setupPinDirection+0x13c>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_setupPinDirection+0x138>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	3f c0       	rjmp	.+126    	; 0x1096 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,Pin_num);
    1018:	a4 e3       	ldi	r26, 0x34	; 52
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e4 e3       	ldi	r30, 0x34	; 52
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_setupPinDirection+0x166>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_setupPinDirection+0x162>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	2b c0       	rjmp	.+86     	; 0x1096 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_INPUT){
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	88 23       	and	r24, r24
    1044:	a9 f4       	brne	.+42     	; 0x1070 <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD,Pin_num);
    1046:	a1 e3       	ldi	r26, 0x31	; 49
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e1 e3       	ldi	r30, 0x31	; 49
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_setupPinDirection+0x194>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_setupPinDirection+0x190>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	13 c0       	rjmp	.+38     	; 0x1096 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,Pin_num);
    1070:	a1 e3       	ldi	r26, 0x31	; 49
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e1 e3       	ldi	r30, 0x31	; 49
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_setupPinDirection+0x1be>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_setupPinDirection+0x1ba>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <GPIO_writePin>:
* Description:
* write Logic High or Low in a Specific Pin in PORT Passed to Function
* if Port_num or Pin_num are invalid, function will not handle the request
* if This Pin are defined as Input Pin, It will be activate or deactivate of Internal Pull-up Resistor
*/
void GPIO_writePin(uint8 Port_num , uint8 Pin_num , uint8 value){
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <GPIO_writePin+0x6>
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <GPIO_writePin+0x8>
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	6a 83       	std	Y+2, r22	; 0x02
    10b8:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_num >= NUM_OF_PORTS || Pin_num >= NUM_OF_PINS_PER_PORT)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <GPIO_writePin+0x1c>
    10c0:	d5 c0       	rjmp	.+426    	; 0x126c <GPIO_writePin+0x1c6>
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	88 30       	cpi	r24, 0x08	; 8
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <GPIO_writePin+0x24>
    10c8:	d1 c0       	rjmp	.+418    	; 0x126c <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(Port_num){
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3d 83       	std	Y+5, r19	; 0x05
    10d2:	2c 83       	std	Y+4, r18	; 0x04
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <GPIO_writePin+0x3a>
    10de:	43 c0       	rjmp	.+134    	; 0x1166 <GPIO_writePin+0xc0>
    10e0:	2c 81       	ldd	r18, Y+4	; 0x04
    10e2:	3d 81       	ldd	r19, Y+5	; 0x05
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <GPIO_writePin+0x4e>
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	71 f0       	breq	.+28     	; 0x110e <GPIO_writePin+0x68>
    10f2:	bc c0       	rjmp	.+376    	; 0x126c <GPIO_writePin+0x1c6>
    10f4:	2c 81       	ldd	r18, Y+4	; 0x04
    10f6:	3d 81       	ldd	r19, Y+5	; 0x05
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <GPIO_writePin+0x5a>
    10fe:	5f c0       	rjmp	.+190    	; 0x11be <GPIO_writePin+0x118>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	09 f4       	brne	.+2      	; 0x110c <GPIO_writePin+0x66>
    110a:	85 c0       	rjmp	.+266    	; 0x1216 <GPIO_writePin+0x170>
    110c:	af c0       	rjmp	.+350    	; 0x126c <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_High)
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	a1 f4       	brne	.+40     	; 0x113c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,Pin_num);
    1114:	ab e3       	ldi	r26, 0x3B	; 59
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	eb e3       	ldi	r30, 0x3B	; 59
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_writePin+0x8c>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_writePin+0x88>
    1136:	84 2b       	or	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	98 c0       	rjmp	.+304    	; 0x126c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,Pin_num);
    113c:	ab e3       	ldi	r26, 0x3B	; 59
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	eb e3       	ldi	r30, 0x3B	; 59
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_writePin+0xb4>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_writePin+0xb0>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	83 c0       	rjmp	.+262    	; 0x126c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_High){
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	a1 f4       	brne	.+40     	; 0x1194 <GPIO_writePin+0xee>
				SET_BIT(PORTB,Pin_num);
    116c:	a8 e3       	ldi	r26, 0x38	; 56
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e8 e3       	ldi	r30, 0x38	; 56
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_writePin+0xe4>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_writePin+0xe0>
    118e:	84 2b       	or	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	6c c0       	rjmp	.+216    	; 0x126c <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,Pin_num);
    1194:	a8 e3       	ldi	r26, 0x38	; 56
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e8 e3       	ldi	r30, 0x38	; 56
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_writePin+0x10c>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_writePin+0x108>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	57 c0       	rjmp	.+174    	; 0x126c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_High)
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	a1 f4       	brne	.+40     	; 0x11ec <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,Pin_num);
    11c4:	a5 e3       	ldi	r26, 0x35	; 53
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_writePin+0x13c>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_writePin+0x138>
    11e6:	84 2b       	or	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	40 c0       	rjmp	.+128    	; 0x126c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,Pin_num);
    11ec:	a5 e3       	ldi	r26, 0x35	; 53
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e3       	ldi	r30, 0x35	; 53
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <GPIO_writePin+0x164>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <GPIO_writePin+0x160>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	2b c0       	rjmp	.+86     	; 0x126c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_High)
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	a1 f4       	brne	.+40     	; 0x1244 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,Pin_num);
    121c:	a2 e3       	ldi	r26, 0x32	; 50
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <GPIO_writePin+0x194>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <GPIO_writePin+0x190>
    123e:	84 2b       	or	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	14 c0       	rjmp	.+40     	; 0x126c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,Pin_num);
    1244:	a2 e3       	ldi	r26, 0x32	; 50
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e2 e3       	ldi	r30, 0x32	; 50
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_writePin+0x1bc>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_writePin+0x1b8>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <GPIO_ReadPin>:
/*
* Description:
* Read value of Certain Pin in Port passed to Function (Logic High or LOW)
* if Port_num or Pin_num are invalid, function will return LOW
*/
uint8 GPIO_ReadPin(uint8 Port_num , uint8 Pin_num){
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_ReadPin+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <GPIO_ReadPin+0x8>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <GPIO_ReadPin+0xa>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_num >= NUM_OF_PORTS || Pin_num >= NUM_OF_PINS_PER_PORT){
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	18 f4       	brcc	.+6      	; 0x129a <GPIO_ReadPin+0x1e>
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	10 f0       	brcs	.+4      	; 0x129e <GPIO_ReadPin+0x22>
		/* Return Logic LOW */
		return LOGIC_Low;
    129a:	1d 82       	std	Y+5, r1	; 0x05
    129c:	82 c0       	rjmp	.+260    	; 0x13a2 <GPIO_ReadPin+0x126>
	}
	else
	{
		switch(Port_num){
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3c 83       	std	Y+4, r19	; 0x04
    12a6:	2b 83       	std	Y+3, r18	; 0x03
    12a8:	4b 81       	ldd	r20, Y+3	; 0x03
    12aa:	5c 81       	ldd	r21, Y+4	; 0x04
    12ac:	41 30       	cpi	r20, 0x01	; 1
    12ae:	51 05       	cpc	r21, r1
    12b0:	79 f1       	breq	.+94     	; 0x1310 <GPIO_ReadPin+0x94>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	91 05       	cpc	r25, r1
    12ba:	34 f4       	brge	.+12     	; 0x12c8 <GPIO_ReadPin+0x4c>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	21 15       	cp	r18, r1
    12c2:	31 05       	cpc	r19, r1
    12c4:	69 f0       	breq	.+26     	; 0x12e0 <GPIO_ReadPin+0x64>
    12c6:	6c c0       	rjmp	.+216    	; 0x13a0 <GPIO_ReadPin+0x124>
    12c8:	4b 81       	ldd	r20, Y+3	; 0x03
    12ca:	5c 81       	ldd	r21, Y+4	; 0x04
    12cc:	42 30       	cpi	r20, 0x02	; 2
    12ce:	51 05       	cpc	r21, r1
    12d0:	b9 f1       	breq	.+110    	; 0x1340 <GPIO_ReadPin+0xc4>
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <GPIO_ReadPin+0x62>
    12dc:	49 c0       	rjmp	.+146    	; 0x1370 <GPIO_ReadPin+0xf4>
    12de:	60 c0       	rjmp	.+192    	; 0x13a0 <GPIO_ReadPin+0x124>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,Pin_num)){
    12e0:	e9 e3       	ldi	r30, 0x39	; 57
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a9 01       	movw	r20, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <GPIO_ReadPin+0x7c>
    12f4:	55 95       	asr	r21
    12f6:	47 95       	ror	r20
    12f8:	8a 95       	dec	r24
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <GPIO_ReadPin+0x78>
    12fc:	ca 01       	movw	r24, r20
    12fe:	81 70       	andi	r24, 0x01	; 1
    1300:	90 70       	andi	r25, 0x00	; 0
    1302:	88 23       	and	r24, r24
    1304:	19 f0       	breq	.+6      	; 0x130c <GPIO_ReadPin+0x90>
				return LOGIC_High;
    1306:	51 e0       	ldi	r21, 0x01	; 1
    1308:	5d 83       	std	Y+5, r21	; 0x05
    130a:	4b c0       	rjmp	.+150    	; 0x13a2 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    130c:	1d 82       	std	Y+5, r1	; 0x05
    130e:	49 c0       	rjmp	.+146    	; 0x13a2 <GPIO_ReadPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,Pin_num)){
    1310:	e6 e3       	ldi	r30, 0x36	; 54
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a9 01       	movw	r20, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_ReadPin+0xac>
    1324:	55 95       	asr	r21
    1326:	47 95       	ror	r20
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_ReadPin+0xa8>
    132c:	ca 01       	movw	r24, r20
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	90 70       	andi	r25, 0x00	; 0
    1332:	88 23       	and	r24, r24
    1334:	19 f0       	breq	.+6      	; 0x133c <GPIO_ReadPin+0xc0>
				return LOGIC_High;
    1336:	51 e0       	ldi	r21, 0x01	; 1
    1338:	5d 83       	std	Y+5, r21	; 0x05
    133a:	33 c0       	rjmp	.+102    	; 0x13a2 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    133c:	1d 82       	std	Y+5, r1	; 0x05
    133e:	31 c0       	rjmp	.+98     	; 0x13a2 <GPIO_ReadPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,Pin_num)){
    1340:	e3 e3       	ldi	r30, 0x33	; 51
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_ReadPin+0xdc>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_ReadPin+0xd8>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	90 70       	andi	r25, 0x00	; 0
    1362:	88 23       	and	r24, r24
    1364:	19 f0       	breq	.+6      	; 0x136c <GPIO_ReadPin+0xf0>
				return LOGIC_High;
    1366:	51 e0       	ldi	r21, 0x01	; 1
    1368:	5d 83       	std	Y+5, r21	; 0x05
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    136c:	1d 82       	std	Y+5, r1	; 0x05
    136e:	19 c0       	rjmp	.+50     	; 0x13a2 <GPIO_ReadPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,Pin_num)){
    1370:	e0 e3       	ldi	r30, 0x30	; 48
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_ReadPin+0x10c>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_ReadPin+0x108>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	90 70       	andi	r25, 0x00	; 0
    1392:	88 23       	and	r24, r24
    1394:	19 f0       	breq	.+6      	; 0x139c <GPIO_ReadPin+0x120>
				return LOGIC_High;
    1396:	51 e0       	ldi	r21, 0x01	; 1
    1398:	5d 83       	std	Y+5, r21	; 0x05
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    139c:	1d 82       	std	Y+5, r1	; 0x05
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <GPIO_ReadPin+0x126>
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_ReadPin+0x12a>
			}
			break;
		}
	}
}
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	8e 83       	std	Y+6, r24	; 0x06
    13a6:	8e 81       	ldd	r24, Y+6	; 0x06
    13a8:	26 96       	adiw	r28, 0x06	; 6
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <GPIO_setupPortDirection>:
* set Direction of any PORT Passed to Function (input or output)
* if direction value is PORT_INPUT --> All Pins will be Input Pins
* if direction value is PORT_OUTPUT --> All Pins will be output Pins
* if Port_num is invalid, function will not handle the request
*/
void GPIO_setupPortDirection(uint8 Port_num , GPIO_PortDirectionType direction){
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <GPIO_setupPortDirection+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <GPIO_setupPortDirection+0x8>
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_num >= NUM_OF_PORTS){
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	90 f5       	brcc	.+100    	; 0x1434 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else{
		switch(Port_num){
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3c 83       	std	Y+4, r19	; 0x04
    13d8:	2b 83       	std	Y+3, r18	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	d1 f0       	breq	.+52     	; 0x1418 <GPIO_setupPortDirection+0x5e>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <GPIO_setupPortDirection+0x3e>
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	61 f0       	breq	.+24     	; 0x140e <GPIO_setupPortDirection+0x54>
    13f6:	1e c0       	rjmp	.+60     	; 0x1434 <GPIO_setupPortDirection+0x7a>
    13f8:	2b 81       	ldd	r18, Y+3	; 0x03
    13fa:	3c 81       	ldd	r19, Y+4	; 0x04
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	81 f0       	breq	.+32     	; 0x1422 <GPIO_setupPortDirection+0x68>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	81 f0       	breq	.+32     	; 0x142c <GPIO_setupPortDirection+0x72>
    140c:	13 c0       	rjmp	.+38     	; 0x1434 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    140e:	ea e3       	ldi	r30, 0x3A	; 58
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	80 83       	st	Z, r24
    1416:	0e c0       	rjmp	.+28     	; 0x1434 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1418:	e7 e3       	ldi	r30, 0x37	; 55
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	80 83       	st	Z, r24
    1420:	09 c0       	rjmp	.+18     	; 0x1434 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1422:	e4 e3       	ldi	r30, 0x34	; 52
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	80 83       	st	Z, r24
    142a:	04 c0       	rjmp	.+8      	; 0x1434 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    142c:	e1 e3       	ldi	r30, 0x31	; 49
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	80 83       	st	Z, r24
			break;
		}
	}
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <GPIO_writePort>:
* write Logic High or Low in a Specific PORT Passed to Function
* if Port_num is invalid, function will not handle the request
* if value of PORT is LOGIC HIGH or LOW and Pin is output ---> value will be written
* if value of PORT is LOGIC HIGH or LOW and PIN is input ---> activate or deactivate Pull-up Resistor
*/
void GPIO_writePort(uint8 Port_num , uint8 value){
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <GPIO_writePort+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <GPIO_writePort+0x8>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_num >= NUM_OF_PORTS){
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	84 30       	cpi	r24, 0x04	; 4
    1456:	90 f5       	brcc	.+100    	; 0x14bc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else{
		switch(Port_num){
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3c 83       	std	Y+4, r19	; 0x04
    1460:	2b 83       	std	Y+3, r18	; 0x03
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	d1 f0       	breq	.+52     	; 0x14a0 <GPIO_writePort+0x5e>
    146c:	2b 81       	ldd	r18, Y+3	; 0x03
    146e:	3c 81       	ldd	r19, Y+4	; 0x04
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	2c f4       	brge	.+10     	; 0x1480 <GPIO_writePort+0x3e>
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	61 f0       	breq	.+24     	; 0x1496 <GPIO_writePort+0x54>
    147e:	1e c0       	rjmp	.+60     	; 0x14bc <GPIO_writePort+0x7a>
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	81 f0       	breq	.+32     	; 0x14aa <GPIO_writePort+0x68>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	91 05       	cpc	r25, r1
    1492:	81 f0       	breq	.+32     	; 0x14b4 <GPIO_writePort+0x72>
    1494:	13 c0       	rjmp	.+38     	; 0x14bc <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1496:	eb e3       	ldi	r30, 0x3B	; 59
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14a0:	e8 e3       	ldi	r30, 0x38	; 56
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	80 83       	st	Z, r24
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14aa:	e5 e3       	ldi	r30, 0x35	; 53
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	80 83       	st	Z, r24
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14b4:	e2 e3       	ldi	r30, 0x32	; 50
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 83       	st	Z, r24
			break;
		}
	}
}
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <GPIO_readPort>:
/*
* Description:
* Read value of Certain Port passed to Function (Logic High or LOW)
* if Port_num is invalid, function will return LOW
*/
uint8 GPIO_readPort(uint8 Port_num){
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <GPIO_readPort+0x6>
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <GPIO_readPort+0x8>
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_Low ;
    14d8:	19 82       	std	Y+1, r1	; 0x01
	if(Port_num >= NUM_OF_PORTS){
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	90 f5       	brcc	.+100    	; 0x1544 <GPIO_readPort+0x7a>
		/* Return Logic LOW */
	}
	else{
		switch(Port_num){
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3c 83       	std	Y+4, r19	; 0x04
    14e8:	2b 83       	std	Y+3, r18	; 0x03
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	d1 f0       	breq	.+52     	; 0x1528 <GPIO_readPort+0x5e>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <GPIO_readPort+0x3e>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <GPIO_readPort+0x54>
    1506:	1e c0       	rjmp	.+60     	; 0x1544 <GPIO_readPort+0x7a>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	81 f0       	breq	.+32     	; 0x1532 <GPIO_readPort+0x68>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	81 f0       	breq	.+32     	; 0x153c <GPIO_readPort+0x72>
    151c:	13 c0       	rjmp	.+38     	; 0x1544 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    151e:	e9 e3       	ldi	r30, 0x39	; 57
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1528:	e6 e3       	ldi	r30, 0x36	; 54
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1532:	e3 e3       	ldi	r30, 0x33	; 51
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    153c:	e0 e3       	ldi	r30, 0x30	; 48
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <LCD_init>:
*                 1- Setup LCD Pins Direction using GPIO_Driver
*                 2- Setup LCD Data Mode 4-bits or 8-bits
* [Argument] : No arguments
* [Returns] : No return data type
*****************************************************************************/
void LCD_init(void){
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	2e 97       	sbiw	r28, 0x0e	; 14
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
	/* configure the direction of RS/Enable pins as output Pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID , LCD_RS_PIN_ID , PIN_OUTPUT);
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	41 e0       	ldi	r20, 0x01	; 1
    156e:	0e 94 68 07 	call	0xed0	; 0xed0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID , LCD_E_PIN_ID , PIN_OUTPUT);
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	63 e0       	ldi	r22, 0x03	; 3
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	0e 94 68 07 	call	0xed0	; 0xed0 <GPIO_setupPinDirection>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 ea       	ldi	r26, 0xA0	; 160
    1582:	b1 e4       	ldi	r27, 0x41	; 65
    1584:	8b 87       	std	Y+11, r24	; 0x0b
    1586:	9c 87       	std	Y+12, r25	; 0x0c
    1588:	ad 87       	std	Y+13, r26	; 0x0d
    158a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	6b 85       	ldd	r22, Y+11	; 0x0b
    158e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	8f 83       	std	Y+7, r24	; 0x07
    15a6:	98 87       	std	Y+8, r25	; 0x08
    15a8:	a9 87       	std	Y+9, r26	; 0x09
    15aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <LCD_init+0x7a>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <LCD_init+0xf8>
	else if (__tmp > 65535)
    15ce:	6f 81       	ldd	r22, Y+7	; 0x07
    15d0:	78 85       	ldd	r23, Y+8	; 0x08
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	0f c0       	rjmp	.+30     	; 0x162e <LCD_init+0xda>
    1610:	88 ec       	ldi	r24, 0xC8	; 200
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9c 83       	std	Y+4, r25	; 0x04
    1616:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <LCD_init+0xc8>
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <LCD_init+0xbc>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	6f 81       	ldd	r22, Y+7	; 0x07
    163a:	78 85       	ldd	r23, Y+8	; 0x08
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <LCD_init+0x104>
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* configure the direction of Port of Data as output Port*/
	GPIO_setupPortDirection(LCD_DATA_PORT_ID , PORT_OUTPUT);
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	6f ef       	ldi	r22, 0xFF	; 255
    1664:	0e 94 dd 09 	call	0x13ba	; 0x13ba <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* 2-lines LCD + 8-bit data mode */
    1668:	88 e3       	ldi	r24, 0x38	; 56
    166a:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor OFF */
    166e:	8c e0       	ldi	r24, 0x0C	; 12
    1670:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear screen at the beginning */
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_sendCommand>
}
    167a:	2e 96       	adiw	r28, 0x0e	; 14
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <LCD_sendCommand>:
* [Function_Name] : LCD_sendCommand
* [Description] : Send The Required Command to screen
* [Argument] : uint8 Command --> 8-bits Command
* [Returns] : No return data type
************************************************************************************/
void LCD_sendCommand(uint8 Command){
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	e9 97       	sbiw	r28, 0x39	; 57
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_Low); /* Command Mode RS=0 */
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	62 e0       	ldi	r22, 0x02	; 2
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GPIO_writePin>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 e8       	ldi	r26, 0x80	; 128
    16b2:	bf e3       	ldi	r27, 0x3F	; 63
    16b4:	8d ab       	std	Y+53, r24	; 0x35
    16b6:	9e ab       	std	Y+54, r25	; 0x36
    16b8:	af ab       	std	Y+55, r26	; 0x37
    16ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6d a9       	ldd	r22, Y+53	; 0x35
    16be:	7e a9       	ldd	r23, Y+54	; 0x36
    16c0:	8f a9       	ldd	r24, Y+55	; 0x37
    16c2:	98 ad       	ldd	r25, Y+56	; 0x38
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a ef       	ldi	r20, 0xFA	; 250
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	89 ab       	std	Y+49, r24	; 0x31
    16d6:	9a ab       	std	Y+50, r25	; 0x32
    16d8:	ab ab       	std	Y+51, r26	; 0x33
    16da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16dc:	69 a9       	ldd	r22, Y+49	; 0x31
    16de:	7a a9       	ldd	r23, Y+50	; 0x32
    16e0:	8b a9       	ldd	r24, Y+51	; 0x33
    16e2:	9c a9       	ldd	r25, Y+52	; 0x34
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <LCD_sendCommand+0x72>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	98 ab       	std	Y+48, r25	; 0x30
    16fa:	8f a7       	std	Y+47, r24	; 0x2f
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    16fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1700:	7a a9       	ldd	r23, Y+50	; 0x32
    1702:	8b a9       	ldd	r24, Y+51	; 0x33
    1704:	9c a9       	ldd	r25, Y+52	; 0x34
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6d a9       	ldd	r22, Y+53	; 0x35
    1718:	7e a9       	ldd	r23, Y+54	; 0x36
    171a:	8f a9       	ldd	r24, Y+55	; 0x37
    171c:	98 ad       	ldd	r25, Y+56	; 0x38
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	98 ab       	std	Y+48, r25	; 0x30
    173c:	8f a7       	std	Y+47, r24	; 0x2f
    173e:	0f c0       	rjmp	.+30     	; 0x175e <LCD_sendCommand+0xd2>
    1740:	88 ec       	ldi	r24, 0xC8	; 200
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9e a7       	std	Y+46, r25	; 0x2e
    1746:	8d a7       	std	Y+45, r24	; 0x2d
    1748:	8d a5       	ldd	r24, Y+45	; 0x2d
    174a:	9e a5       	ldd	r25, Y+46	; 0x2e
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_sendCommand+0xc0>
    1750:	9e a7       	std	Y+46, r25	; 0x2e
    1752:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8f a5       	ldd	r24, Y+47	; 0x2f
    1756:	98 a9       	ldd	r25, Y+48	; 0x30
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	98 ab       	std	Y+48, r25	; 0x30
    175c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1760:	98 a9       	ldd	r25, Y+48	; 0x30
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <LCD_sendCommand+0xb4>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	69 a9       	ldd	r22, Y+49	; 0x31
    176a:	7a a9       	ldd	r23, Y+50	; 0x32
    176c:	8b a9       	ldd	r24, Y+51	; 0x33
    176e:	9c a9       	ldd	r25, Y+52	; 0x34
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	98 ab       	std	Y+48, r25	; 0x30
    177a:	8f a7       	std	Y+47, r24	; 0x2f
    177c:	8f a5       	ldd	r24, Y+47	; 0x2f
    177e:	98 a9       	ldd	r25, Y+48	; 0x30
    1780:	9c a7       	std	Y+44, r25	; 0x2c
    1782:	8b a7       	std	Y+43, r24	; 0x2b
    1784:	8b a5       	ldd	r24, Y+43	; 0x2b
    1786:	9c a5       	ldd	r25, Y+44	; 0x2c
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <LCD_sendCommand+0xfc>
    178c:	9c a7       	std	Y+44, r25	; 0x2c
    178e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_High); /* Enable LCD E=1 */
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	63 e0       	ldi	r22, 0x03	; 3
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GPIO_writePin>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	8f a3       	std	Y+39, r24	; 0x27
    17a4:	98 a7       	std	Y+40, r25	; 0x28
    17a6:	a9 a7       	std	Y+41, r26	; 0x29
    17a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6f a1       	ldd	r22, Y+39	; 0x27
    17ac:	78 a5       	ldd	r23, Y+40	; 0x28
    17ae:	89 a5       	ldd	r24, Y+41	; 0x29
    17b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a ef       	ldi	r20, 0xFA	; 250
    17b8:	54 e4       	ldi	r21, 0x44	; 68
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	8b a3       	std	Y+35, r24	; 0x23
    17c4:	9c a3       	std	Y+36, r25	; 0x24
    17c6:	ad a3       	std	Y+37, r26	; 0x25
    17c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17ca:	6b a1       	ldd	r22, Y+35	; 0x23
    17cc:	7c a1       	ldd	r23, Y+36	; 0x24
    17ce:	8d a1       	ldd	r24, Y+37	; 0x25
    17d0:	9e a1       	ldd	r25, Y+38	; 0x26
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <LCD_sendCommand+0x160>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9a a3       	std	Y+34, r25	; 0x22
    17e8:	89 a3       	std	Y+33, r24	; 0x21
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    17ec:	6b a1       	ldd	r22, Y+35	; 0x23
    17ee:	7c a1       	ldd	r23, Y+36	; 0x24
    17f0:	8d a1       	ldd	r24, Y+37	; 0x25
    17f2:	9e a1       	ldd	r25, Y+38	; 0x26
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6f a1       	ldd	r22, Y+39	; 0x27
    1806:	78 a5       	ldd	r23, Y+40	; 0x28
    1808:	89 a5       	ldd	r24, Y+41	; 0x29
    180a:	9a a5       	ldd	r25, Y+42	; 0x2a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9a a3       	std	Y+34, r25	; 0x22
    182a:	89 a3       	std	Y+33, r24	; 0x21
    182c:	0f c0       	rjmp	.+30     	; 0x184c <LCD_sendCommand+0x1c0>
    182e:	88 ec       	ldi	r24, 0xC8	; 200
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	98 a3       	std	Y+32, r25	; 0x20
    1834:	8f 8f       	std	Y+31, r24	; 0x1f
    1836:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1838:	98 a1       	ldd	r25, Y+32	; 0x20
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_sendCommand+0x1ae>
    183e:	98 a3       	std	Y+32, r25	; 0x20
    1840:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	89 a1       	ldd	r24, Y+33	; 0x21
    1844:	9a a1       	ldd	r25, Y+34	; 0x22
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	9a a3       	std	Y+34, r25	; 0x22
    184a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	89 a1       	ldd	r24, Y+33	; 0x21
    184e:	9a a1       	ldd	r25, Y+34	; 0x22
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <LCD_sendCommand+0x1a2>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	6b a1       	ldd	r22, Y+35	; 0x23
    1858:	7c a1       	ldd	r23, Y+36	; 0x24
    185a:	8d a1       	ldd	r24, Y+37	; 0x25
    185c:	9e a1       	ldd	r25, Y+38	; 0x26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9a a3       	std	Y+34, r25	; 0x22
    1868:	89 a3       	std	Y+33, r24	; 0x21
    186a:	89 a1       	ldd	r24, Y+33	; 0x21
    186c:	9a a1       	ldd	r25, Y+34	; 0x22
    186e:	9e 8f       	std	Y+30, r25	; 0x1e
    1870:	8d 8f       	std	Y+29, r24	; 0x1d
    1872:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1874:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <LCD_sendCommand+0x1ea>
    187a:	9e 8f       	std	Y+30, r25	; 0x1e
    187c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_Low); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID , Command); /* Send Command to PORTC */
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	69 ad       	ldd	r22, Y+57	; 0x39
    1882:	0e 94 21 0a 	call	0x1442	; 0x1442 <GPIO_writePort>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e8       	ldi	r26, 0x80	; 128
    188c:	bf e3       	ldi	r27, 0x3F	; 63
    188e:	89 8f       	std	Y+25, r24	; 0x19
    1890:	9a 8f       	std	Y+26, r25	; 0x1a
    1892:	ab 8f       	std	Y+27, r26	; 0x1b
    1894:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	69 8d       	ldd	r22, Y+25	; 0x19
    1898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8d 8b       	std	Y+21, r24	; 0x15
    18b0:	9e 8b       	std	Y+22, r25	; 0x16
    18b2:	af 8b       	std	Y+23, r26	; 0x17
    18b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b6:	6d 89       	ldd	r22, Y+21	; 0x15
    18b8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	98 8d       	ldd	r25, Y+24	; 0x18
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	69 8d       	ldd	r22, Y+25	; 0x19
    18f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <LCD_sendCommand+0x2ac>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
    1922:	89 89       	ldd	r24, Y+17	; 0x11
    1924:	9a 89       	ldd	r25, Y+18	; 0x12
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_sendCommand+0x29a>
    192a:	9a 8b       	std	Y+18, r25	; 0x12
    192c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <LCD_sendCommand+0x28e>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	98 89       	ldd	r25, Y+16	; 0x10
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_sendCommand+0x2d6>
    1966:	98 8b       	std	Y+16, r25	; 0x10
    1968:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_Low); /* Disable LCD E=0 */
    196a:	83 e0       	ldi	r24, 0x03	; 3
    196c:	63 e0       	ldi	r22, 0x03	; 3
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GPIO_writePin>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a0 e8       	ldi	r26, 0x80	; 128
    197a:	bf e3       	ldi	r27, 0x3F	; 63
    197c:	8b 87       	std	Y+11, r24	; 0x0b
    197e:	9c 87       	std	Y+12, r25	; 0x0c
    1980:	ad 87       	std	Y+13, r26	; 0x0d
    1982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	6b 85       	ldd	r22, Y+11	; 0x0b
    1986:	7c 85       	ldd	r23, Y+12	; 0x0c
    1988:	8d 85       	ldd	r24, Y+13	; 0x0d
    198a:	9e 85       	ldd	r25, Y+14	; 0x0e
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8f 83       	std	Y+7, r24	; 0x07
    199e:	98 87       	std	Y+8, r25	; 0x08
    19a0:	a9 87       	std	Y+9, r26	; 0x09
    19a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a4:	6f 81       	ldd	r22, Y+7	; 0x07
    19a6:	78 85       	ldd	r23, Y+8	; 0x08
    19a8:	89 85       	ldd	r24, Y+9	; 0x09
    19aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9e 83       	std	Y+6, r25	; 0x06
    1a04:	8d 83       	std	Y+5, r24	; 0x05
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <LCD_sendCommand+0x39a>
    1a08:	88 ec       	ldi	r24, 0xC8	; 200
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <LCD_sendCommand+0x388>
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <LCD_sendCommand+0x37c>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6f 81       	ldd	r22, Y+7	; 0x07
    1a32:	78 85       	ldd	r23, Y+8	; 0x08
    1a34:	89 85       	ldd	r24, Y+9	; 0x09
    1a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	8d 81       	ldd	r24, Y+5	; 0x05
    1a46:	9e 81       	ldd	r25, Y+6	; 0x06
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_sendCommand+0x3c4>
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    1a58:	e9 96       	adiw	r28, 0x39	; 57
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <LCD_displayCharacter>:
* [Function_Name] : LCD_displayCharacter
* [Description] : Display the required character or screen
* [Argument] : uint8 Character --> 8-bits Character
* [Returns] : No return data type
***********************************************************************************/
void LCD_displayCharacter(uint8 character){
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	e9 97       	sbiw	r28, 0x39	; 57
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_High); /* Data Mode RS=1 */
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	62 e0       	ldi	r22, 0x02	; 2
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GPIO_writePin>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	8d ab       	std	Y+53, r24	; 0x35
    1a94:	9e ab       	std	Y+54, r25	; 0x36
    1a96:	af ab       	std	Y+55, r26	; 0x37
    1a98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a ef       	ldi	r20, 0xFA	; 250
    1aa8:	54 e4       	ldi	r21, 0x44	; 68
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	89 ab       	std	Y+49, r24	; 0x31
    1ab4:	9a ab       	std	Y+50, r25	; 0x32
    1ab6:	ab ab       	std	Y+51, r26	; 0x33
    1ab8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aba:	69 a9       	ldd	r22, Y+49	; 0x31
    1abc:	7a a9       	ldd	r23, Y+50	; 0x32
    1abe:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_displayCharacter+0x72>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	98 ab       	std	Y+48, r25	; 0x30
    1ad8:	8f a7       	std	Y+47, r24	; 0x2f
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1adc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ade:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6d a9       	ldd	r22, Y+53	; 0x35
    1af6:	7e a9       	ldd	r23, Y+54	; 0x36
    1af8:	8f a9       	ldd	r24, Y+55	; 0x37
    1afa:	98 ad       	ldd	r25, Y+56	; 0x38
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_displayCharacter+0xd2>
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9e a7       	std	Y+46, r25	; 0x2e
    1b24:	8d a7       	std	Y+45, r24	; 0x2d
    1b26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_displayCharacter+0xc0>
    1b2e:	9e a7       	std	Y+46, r25	; 0x2e
    1b30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b34:	98 a9       	ldd	r25, Y+48	; 0x30
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	98 ab       	std	Y+48, r25	; 0x30
    1b3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_displayCharacter+0xb4>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	69 a9       	ldd	r22, Y+49	; 0x31
    1b48:	7a a9       	ldd	r23, Y+50	; 0x32
    1b4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	9c a7       	std	Y+44, r25	; 0x2c
    1b60:	8b a7       	std	Y+43, r24	; 0x2b
    1b62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_displayCharacter+0xfc>
    1b6a:	9c a7       	std	Y+44, r25	; 0x2c
    1b6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_High); /* Enable LCD E=1 */
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	63 e0       	ldi	r22, 0x03	; 3
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GPIO_writePin>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e8       	ldi	r26, 0x80	; 128
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	8f a3       	std	Y+39, r24	; 0x27
    1b82:	98 a7       	std	Y+40, r25	; 0x28
    1b84:	a9 a7       	std	Y+41, r26	; 0x29
    1b86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	6f a1       	ldd	r22, Y+39	; 0x27
    1b8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a ef       	ldi	r20, 0xFA	; 250
    1b96:	54 e4       	ldi	r21, 0x44	; 68
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	8b a3       	std	Y+35, r24	; 0x23
    1ba2:	9c a3       	std	Y+36, r25	; 0x24
    1ba4:	ad a3       	std	Y+37, r26	; 0x25
    1ba6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    1baa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bac:	8d a1       	ldd	r24, Y+37	; 0x25
    1bae:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <LCD_displayCharacter+0x160>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9a a3       	std	Y+34, r25	; 0x22
    1bc6:	89 a3       	std	Y+33, r24	; 0x21
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1bca:	6b a1       	ldd	r22, Y+35	; 0x23
    1bcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bce:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	6f a1       	ldd	r22, Y+39	; 0x27
    1be4:	78 a5       	ldd	r23, Y+40	; 0x28
    1be6:	89 a5       	ldd	r24, Y+41	; 0x29
    1be8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9a a3       	std	Y+34, r25	; 0x22
    1c08:	89 a3       	std	Y+33, r24	; 0x21
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <LCD_displayCharacter+0x1c0>
    1c0c:	88 ec       	ldi	r24, 0xC8	; 200
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	98 a3       	std	Y+32, r25	; 0x20
    1c12:	8f 8f       	std	Y+31, r24	; 0x1f
    1c14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c16:	98 a1       	ldd	r25, Y+32	; 0x20
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_displayCharacter+0x1ae>
    1c1c:	98 a3       	std	Y+32, r25	; 0x20
    1c1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	89 a1       	ldd	r24, Y+33	; 0x21
    1c22:	9a a1       	ldd	r25, Y+34	; 0x22
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9a a3       	std	Y+34, r25	; 0x22
    1c28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <LCD_displayCharacter+0x1a2>
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	6b a1       	ldd	r22, Y+35	; 0x23
    1c36:	7c a1       	ldd	r23, Y+36	; 0x24
    1c38:	8d a1       	ldd	r24, Y+37	; 0x25
    1c3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_displayCharacter+0x1ea>
    1c58:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_Low); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID , character); /* Send Command to PORTC */
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	69 ad       	ldd	r22, Y+57	; 0x39
    1c60:	0e 94 21 0a 	call	0x1442	; 0x1442 <GPIO_writePort>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e8       	ldi	r26, 0x80	; 128
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	89 8f       	std	Y+25, r24	; 0x19
    1c6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1c70:	ab 8f       	std	Y+27, r26	; 0x1b
    1c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	69 8d       	ldd	r22, Y+25	; 0x19
    1c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8d 8b       	std	Y+21, r24	; 0x15
    1c8e:	9e 8b       	std	Y+22, r25	; 0x16
    1c90:	af 8b       	std	Y+23, r26	; 0x17
    1c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9c 8b       	std	Y+20, r25	; 0x14
    1cb2:	8b 8b       	std	Y+19, r24	; 0x13
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cba:	8f 89       	ldd	r24, Y+23	; 0x17
    1cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_displayCharacter+0x2ac>
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9a 8b       	std	Y+18, r25	; 0x12
    1cfe:	89 8b       	std	Y+17, r24	; 0x11
    1d00:	89 89       	ldd	r24, Y+17	; 0x11
    1d02:	9a 89       	ldd	r25, Y+18	; 0x12
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_displayCharacter+0x29a>
    1d08:	9a 8b       	std	Y+18, r25	; 0x12
    1d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9c 8b       	std	Y+20, r25	; 0x14
    1d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8b 89       	ldd	r24, Y+19	; 0x13
    1d18:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_displayCharacter+0x28e>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6d 89       	ldd	r22, Y+21	; 0x15
    1d22:	7e 89       	ldd	r23, Y+22	; 0x16
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	98 8b       	std	Y+16, r25	; 0x10
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
    1d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3e:	98 89       	ldd	r25, Y+16	; 0x10
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_displayCharacter+0x2d6>
    1d44:	98 8b       	std	Y+16, r25	; 0x10
    1d46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID , LCD_E_PIN_ID , LOGIC_Low); /* Disable LCD E=0 */
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	63 e0       	ldi	r22, 0x03	; 3
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GPIO_writePin>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a0 e8       	ldi	r26, 0x80	; 128
    1d58:	bf e3       	ldi	r27, 0x3F	; 63
    1d5a:	8b 87       	std	Y+11, r24	; 0x0b
    1d5c:	9c 87       	std	Y+12, r25	; 0x0c
    1d5e:	ad 87       	std	Y+13, r26	; 0x0d
    1d60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a ef       	ldi	r20, 0xFA	; 250
    1d70:	54 e4       	ldi	r21, 0x44	; 68
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8f 83       	std	Y+7, r24	; 0x07
    1d7c:	98 87       	std	Y+8, r25	; 0x08
    1d7e:	a9 87       	std	Y+9, r26	; 0x09
    1d80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5f e3       	ldi	r21, 0x3F	; 63
    1d92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d96:	88 23       	and	r24, r24
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	3f c0       	rjmp	.+126    	; 0x1e22 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	89 85       	ldd	r24, Y+9	; 0x09
    1daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	3f ef       	ldi	r19, 0xFF	; 255
    1db0:	4f e7       	ldi	r20, 0x7F	; 127
    1db2:	57 e4       	ldi	r21, 0x47	; 71
    1db4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db8:	18 16       	cp	r1, r24
    1dba:	4c f5       	brge	.+82     	; 0x1e0e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <LCD_displayCharacter+0x39a>
    1de6:	88 ec       	ldi	r24, 0xC8	; 200
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_displayCharacter+0x388>
    1df6:	9c 83       	std	Y+4, r25	; 0x04
    1df8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <LCD_displayCharacter+0x37c>
    1e0c:	14 c0       	rjmp	.+40     	; 0x1e36 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	9a 83       	std	Y+2, r25	; 0x02
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <LCD_displayCharacter+0x3c4>
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    1e36:	e9 96       	adiw	r28, 0x39	; 57
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <LCD_displayString>:
* [Function_Name] : LCD_displayString
* [Description] : Display the required String or screen
* [Argument] : char* string ----> Pointer to character, Points to first character in string
* [Returns] : No return data type
**************************************************************************************/
void LCD_displayString(const char* string){
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <LCD_displayString+0x6>
    1e4e:	0f 92       	push	r0
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	9b 83       	std	Y+3, r25	; 0x03
    1e56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e58:	19 82       	std	Y+1, r1	; 0x01
    1e5a:	0e c0       	rjmp	.+28     	; 0x1e78 <LCD_displayString+0x30>
	while(string[i] != '\0')
	{
		LCD_displayCharacter(string[i]);
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	fc 01       	movw	r30, r24
    1e68:	e2 0f       	add	r30, r18
    1e6a:	f3 1f       	adc	r31, r19
    1e6c:	80 81       	ld	r24, Z
    1e6e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LCD_displayCharacter>
		i++;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	8f 5f       	subi	r24, 0xFF	; 255
    1e76:	89 83       	std	Y+1, r24	; 0x01
* [Argument] : char* string ----> Pointer to character, Points to first character in string
* [Returns] : No return data type
**************************************************************************************/
void LCD_displayString(const char* string){
	uint8 i = 0;
	while(string[i] != '\0')
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	fc 01       	movw	r30, r24
    1e84:	e2 0f       	add	r30, r18
    1e86:	f3 1f       	adc	r31, r19
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 23       	and	r24, r24
    1e8c:	39 f7       	brne	.-50     	; 0x1e5c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
		i++;
	}
}
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD_clearScreen>:
* [Function_Name] : LCD_clearScreen
* [Description] : clear the screen
* [Argument] : No arguments
* [Returns] : No return data type
***************************************************************************************/
void LCD_clearScreen(void){
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_sendCommand>
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_integerToString>:
* [Function_Name] : LCD_integerToString
* [Description] : Convert the required integer to string
* [Argument] : int data ---> Passed data that needed to be converted
* [Returns] : No return data type
***************************************************************************************/
void LCD_integerToString(int data){
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	62 97       	sbiw	r28, 0x12	; 18
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	9a 8b       	std	Y+18, r25	; 0x12
    1ec4:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16]; /* Contains ASCII Codes of Numbers, Declared as 16 location---> NUM of COL 16 */
	itoa(data,buffer,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1ec6:	89 89       	ldd	r24, Y+17	; 0x11
    1ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eca:	9e 01       	movw	r18, r28
    1ecc:	2f 5f       	subi	r18, 0xFF	; 255
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	b9 01       	movw	r22, r18
    1ed2:	4a e0       	ldi	r20, 0x0A	; 10
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <itoa>
	LCD_displayString(buffer); /* Display the string */
    1eda:	ce 01       	movw	r24, r28
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>
}
    1ee2:	62 96       	adiw	r28, 0x12	; 18
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LCD_moveCursor>:
* [Description] : Move cursor in specified col number and row number
* [Argument] : uint8 row---> The required row to move cursor
*              uint8 col---> The required col to move cursor
* [Returns] : No return data type
***************************************************************************************/
void LCD_moveCursor(uint8 row , uint8 col){
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <LCD_moveCursor+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <LCD_moveCursor+0x8>
    1efc:	0f 92       	push	r0
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	8a 83       	std	Y+2, r24	; 0x02
    1f04:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_adress ;
	switch(row){
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	3d 83       	std	Y+5, r19	; 0x05
    1f0e:	2c 83       	std	Y+4, r18	; 0x04
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	91 05       	cpc	r25, r1
    1f18:	c1 f0       	breq	.+48     	; 0x1f4a <LCD_moveCursor+0x56>
    1f1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1e:	22 30       	cpi	r18, 0x02	; 2
    1f20:	31 05       	cpc	r19, r1
    1f22:	2c f4       	brge	.+10     	; 0x1f2e <LCD_moveCursor+0x3a>
    1f24:	8c 81       	ldd	r24, Y+4	; 0x04
    1f26:	9d 81       	ldd	r25, Y+5	; 0x05
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	61 f0       	breq	.+24     	; 0x1f44 <LCD_moveCursor+0x50>
    1f2c:	19 c0       	rjmp	.+50     	; 0x1f60 <LCD_moveCursor+0x6c>
    1f2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f30:	3d 81       	ldd	r19, Y+5	; 0x05
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	69 f0       	breq	.+26     	; 0x1f52 <LCD_moveCursor+0x5e>
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	83 30       	cpi	r24, 0x03	; 3
    1f3e:	91 05       	cpc	r25, r1
    1f40:	61 f0       	breq	.+24     	; 0x1f5a <LCD_moveCursor+0x66>
    1f42:	0e c0       	rjmp	.+28     	; 0x1f60 <LCD_moveCursor+0x6c>
	case 0:
		LCD_adress = col;
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	0b c0       	rjmp	.+22     	; 0x1f60 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_adress = col + 0x40;
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	80 5c       	subi	r24, 0xC0	; 192
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	07 c0       	rjmp	.+14     	; 0x1f60 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_adress = col + 0x10;
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	80 5f       	subi	r24, 0xF0	; 240
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	03 c0       	rjmp	.+6      	; 0x1f60 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_adress = col + 0x50;
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	80 5b       	subi	r24, 0xB0	; 176
    1f5e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_adress | LCD_SET_CURSOR_LOCATION);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	80 68       	ori	r24, 0x80	; 128
    1f64:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_sendCommand>
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <LCD_displayStringRowCol>:
* [Argument] : uint8 row---> The required row to move cursor
*              uint8 col---> The required col to move cursor
*              const char* ptr ---> Pointer to character, Points to first character in string
* [Returns] : No return data type
************************************************************************************/
void LCD_displayStringRowCol(uint8 row, uint8 col , const char* string){
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <LCD_displayStringRowCol+0x6>
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <LCD_displayStringRowCol+0x8>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	6a 83       	std	Y+2, r22	; 0x02
    1f88:	5c 83       	std	Y+4, r21	; 0x04
    1f8a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f90:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_moveCursor>
	LCD_displayString(string);
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <KEYPAD_getPressedKey+0x6>
    1fb0:	0f 92       	push	r0
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1fb6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fb8:	1b 82       	std	Y+3, r1	; 0x03
    1fba:	43 c0       	rjmp	.+134    	; 0x2042 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	98 2f       	mov	r25, r24
    1fc8:	9c 5f       	subi	r25, 0xFC	; 252
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	69 2f       	mov	r22, r25
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 68 07 	call	0xed0	; 0xed0 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 01       	movw	r18, r24
    1fdc:	2c 5f       	subi	r18, 0xFC	; 252
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <KEYPAD_getPressedKey+0x40>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	2a 95       	dec	r18
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <KEYPAD_getPressedKey+0x3c>
    1fee:	80 95       	com	r24
    1ff0:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	69 81       	ldd	r22, Y+1	; 0x01
    1ff6:	0e 94 21 0a 	call	0x1442	; 0x1442 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ffa:	1a 82       	std	Y+2, r1	; 0x02
    1ffc:	1c c0       	rjmp	.+56     	; 0x2036 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_ReadPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	6a 81       	ldd	r22, Y+2	; 0x02
    2002:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_ReadPin>
    2006:	88 23       	and	r24, r24
    2008:	99 f4       	brne	.+38     	; 0x2030 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	98 2f       	mov	r25, r24
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	89 0f       	add	r24, r25
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	0e 94 26 10 	call	0x204c	; 0x204c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	8a 83       	std	Y+2, r24	; 0x02
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	84 30       	cpi	r24, 0x04	; 4
    203a:	08 f3       	brcs	.-62     	; 0x1ffe <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	8b 83       	std	Y+3, r24	; 0x03
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	84 30       	cpi	r24, 0x04	; 4
    2046:	08 f4       	brcc	.+2      	; 0x204a <KEYPAD_getPressedKey+0xa0>
    2048:	b9 cf       	rjmp	.-142    	; 0x1fbc <KEYPAD_getPressedKey+0x12>
    204a:	b6 cf       	rjmp	.-148    	; 0x1fb8 <KEYPAD_getPressedKey+0xe>

0000204c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	00 d0       	rcall	.+0      	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2052:	00 d0       	rcall	.+0      	; 0x2054 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    205a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	3c 83       	std	Y+4, r19	; 0x04
    2064:	2b 83       	std	Y+3, r18	; 0x03
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	88 30       	cpi	r24, 0x08	; 8
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2070:	70 c0       	rjmp	.+224    	; 0x2152 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2072:	2b 81       	ldd	r18, Y+3	; 0x03
    2074:	3c 81       	ldd	r19, Y+4	; 0x04
    2076:	29 30       	cpi	r18, 0x09	; 9
    2078:	31 05       	cpc	r19, r1
    207a:	5c f5       	brge	.+86     	; 0x20d2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	91 05       	cpc	r25, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2086:	59 c0       	rjmp	.+178    	; 0x213a <KEYPAD_4x4_adjustKeyNumber+0xee>
    2088:	2b 81       	ldd	r18, Y+3	; 0x03
    208a:	3c 81       	ldd	r19, Y+4	; 0x04
    208c:	25 30       	cpi	r18, 0x05	; 5
    208e:	31 05       	cpc	r19, r1
    2090:	9c f4       	brge	.+38     	; 0x20b8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	91 05       	cpc	r25, r1
    209a:	09 f4       	brne	.+2      	; 0x209e <KEYPAD_4x4_adjustKeyNumber+0x52>
    209c:	48 c0       	rjmp	.+144    	; 0x212e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    209e:	2b 81       	ldd	r18, Y+3	; 0x03
    20a0:	3c 81       	ldd	r19, Y+4	; 0x04
    20a2:	23 30       	cpi	r18, 0x03	; 3
    20a4:	31 05       	cpc	r19, r1
    20a6:	0c f0       	brlt	.+2      	; 0x20aa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    20a8:	45 c0       	rjmp	.+138    	; 0x2134 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    20b4:	39 c0       	rjmp	.+114    	; 0x2128 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    20b6:	67 c0       	rjmp	.+206    	; 0x2186 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    20b8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ba:	3c 81       	ldd	r19, Y+4	; 0x04
    20bc:	26 30       	cpi	r18, 0x06	; 6
    20be:	31 05       	cpc	r19, r1
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    20c2:	41 c0       	rjmp	.+130    	; 0x2146 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	87 30       	cpi	r24, 0x07	; 7
    20ca:	91 05       	cpc	r25, r1
    20cc:	0c f0       	brlt	.+2      	; 0x20d0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    20ce:	3e c0       	rjmp	.+124    	; 0x214c <KEYPAD_4x4_adjustKeyNumber+0x100>
    20d0:	37 c0       	rjmp	.+110    	; 0x2140 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	3c 81       	ldd	r19, Y+4	; 0x04
    20d6:	2c 30       	cpi	r18, 0x0C	; 12
    20d8:	31 05       	cpc	r19, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <KEYPAD_4x4_adjustKeyNumber+0x92>
    20dc:	46 c0       	rjmp	.+140    	; 0x216a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	8d 30       	cpi	r24, 0x0D	; 13
    20e4:	91 05       	cpc	r25, r1
    20e6:	5c f4       	brge	.+22     	; 0x20fe <KEYPAD_4x4_adjustKeyNumber+0xb2>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	2a 30       	cpi	r18, 0x0A	; 10
    20ee:	31 05       	cpc	r19, r1
    20f0:	b1 f1       	breq	.+108    	; 0x215e <KEYPAD_4x4_adjustKeyNumber+0x112>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	8b 30       	cpi	r24, 0x0B	; 11
    20f8:	91 05       	cpc	r25, r1
    20fa:	a4 f5       	brge	.+104    	; 0x2164 <KEYPAD_4x4_adjustKeyNumber+0x118>
    20fc:	2d c0       	rjmp	.+90     	; 0x2158 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	2e 30       	cpi	r18, 0x0E	; 14
    2104:	31 05       	cpc	r19, r1
    2106:	b9 f1       	breq	.+110    	; 0x2176 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	8e 30       	cpi	r24, 0x0E	; 14
    210e:	91 05       	cpc	r25, r1
    2110:	7c f1       	brlt	.+94     	; 0x2170 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2112:	2b 81       	ldd	r18, Y+3	; 0x03
    2114:	3c 81       	ldd	r19, Y+4	; 0x04
    2116:	2f 30       	cpi	r18, 0x0F	; 15
    2118:	31 05       	cpc	r19, r1
    211a:	79 f1       	breq	.+94     	; 0x217a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	80 31       	cpi	r24, 0x10	; 16
    2122:	91 05       	cpc	r25, r1
    2124:	69 f1       	breq	.+90     	; 0x2180 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2126:	2f c0       	rjmp	.+94     	; 0x2186 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2128:	87 e0       	ldi	r24, 0x07	; 7
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	2e c0       	rjmp	.+92     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    212e:	88 e0       	ldi	r24, 0x08	; 8
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	2b c0       	rjmp	.+86     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2134:	89 e0       	ldi	r24, 0x09	; 9
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	28 c0       	rjmp	.+80     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    213a:	85 e2       	ldi	r24, 0x25	; 37
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	25 c0       	rjmp	.+74     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	22 c0       	rjmp	.+68     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2146:	85 e0       	ldi	r24, 0x05	; 5
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	1f c0       	rjmp	.+62     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    214c:	86 e0       	ldi	r24, 0x06	; 6
    214e:	89 83       	std	Y+1, r24	; 0x01
    2150:	1c c0       	rjmp	.+56     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2152:	8a e2       	ldi	r24, 0x2A	; 42
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	19 c0       	rjmp	.+50     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	16 c0       	rjmp	.+44     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	13 c0       	rjmp	.+38     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	10 c0       	rjmp	.+32     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    216a:	8d e2       	ldi	r24, 0x2D	; 45
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	0d c0       	rjmp	.+26     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2170:	8d e0       	ldi	r24, 0x0D	; 13
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	0a c0       	rjmp	.+20     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2176:	19 82       	std	Y+1, r1	; 0x01
    2178:	08 c0       	rjmp	.+16     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    217a:	8d e3       	ldi	r24, 0x3D	; 61
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	05 c0       	rjmp	.+10     	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2180:	8b e2       	ldi	r24, 0x2B	; 43
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	02 c0       	rjmp	.+4      	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <main>:
************************************************/
#include "HMI_Utilities.h"
#include "util/delay.h"
#include "avr/io.h"
int main(void)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	ea 97       	sbiw	r28, 0x3a	; 58
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61

	/* Enable Global interrupt Flag */
	SREG |= (1 << 7);
    21ae:	af e5       	ldi	r26, 0x5F	; 95
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ef e5       	ldi	r30, 0x5F	; 95
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	80 68       	ori	r24, 0x80	; 128
    21ba:	8c 93       	st	X, r24

	/* Initialize LCD Driver */
	LCD_init();
    21bc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_init>

	/* Set call back function that will be used in ISR */
	TIMER1_setCallback(Callback);
    21c0:	87 e0       	ldi	r24, 0x07	; 7
    21c2:	95 e1       	ldi	r25, 0x15	; 21
    21c4:	0e 94 56 07 	call	0xeac	; 0xeac <TIMER1_setCallback>
	 * - Start Time       : 0
	 * - Compare value    : 8000
	 * - Pre-scaler       : 1024
	 * - Timer1 Mode      : Compare Mode
	 * ********************************************/
	Timer1_ConfigType Timer_configuration = {0,8000,F_CPU_1024,Compare_Mode};
    21c8:	ce 01       	movw	r24, r28
    21ca:	4f 96       	adiw	r24, 0x1f	; 31
    21cc:	9a ab       	std	Y+50, r25	; 0x32
    21ce:	89 ab       	std	Y+49, r24	; 0x31
    21d0:	e5 e0       	ldi	r30, 0x05	; 5
    21d2:	f1 e0       	ldi	r31, 0x01	; 1
    21d4:	fc ab       	std	Y+52, r31	; 0x34
    21d6:	eb ab       	std	Y+51, r30	; 0x33
    21d8:	f6 e0       	ldi	r31, 0x06	; 6
    21da:	fd ab       	std	Y+53, r31	; 0x35
    21dc:	eb a9       	ldd	r30, Y+51	; 0x33
    21de:	fc a9       	ldd	r31, Y+52	; 0x34
    21e0:	00 80       	ld	r0, Z
    21e2:	8b a9       	ldd	r24, Y+51	; 0x33
    21e4:	9c a9       	ldd	r25, Y+52	; 0x34
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	9c ab       	std	Y+52, r25	; 0x34
    21ea:	8b ab       	std	Y+51, r24	; 0x33
    21ec:	e9 a9       	ldd	r30, Y+49	; 0x31
    21ee:	fa a9       	ldd	r31, Y+50	; 0x32
    21f0:	00 82       	st	Z, r0
    21f2:	89 a9       	ldd	r24, Y+49	; 0x31
    21f4:	9a a9       	ldd	r25, Y+50	; 0x32
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	9a ab       	std	Y+50, r25	; 0x32
    21fa:	89 ab       	std	Y+49, r24	; 0x31
    21fc:	9d a9       	ldd	r25, Y+53	; 0x35
    21fe:	91 50       	subi	r25, 0x01	; 1
    2200:	9d ab       	std	Y+53, r25	; 0x35
    2202:	ed a9       	ldd	r30, Y+53	; 0x35
    2204:	ee 23       	and	r30, r30
    2206:	51 f7       	brne	.-44     	; 0x21dc <main+0x42>
	TIMER1_init_Compare(&Timer_configuration);
    2208:	ce 01       	movw	r24, r28
    220a:	4f 96       	adiw	r24, 0x1f	; 31
    220c:	0e 94 ed 06 	call	0xdda	; 0xdda <TIMER1_init_Compare>
	 * - Number of Bits per Frame     : 8
	 * - Number of Stop bits in Frame : 1
	 * - Parity-bit in the Frame      : Disabled
	 * - Baud Rate of UART            : 9600
	 * ********************************************/
	UART_ConfigType Uart_configuration = {Data_8_bit,Stop_1Bit,Disabled,9600};
    2210:	ce 01       	movw	r24, r28
    2212:	85 96       	adiw	r24, 0x25	; 37
    2214:	9f ab       	std	Y+55, r25	; 0x37
    2216:	8e ab       	std	Y+54, r24	; 0x36
    2218:	ee ef       	ldi	r30, 0xFE	; 254
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	f9 af       	std	Y+57, r31	; 0x39
    221e:	e8 af       	std	Y+56, r30	; 0x38
    2220:	f7 e0       	ldi	r31, 0x07	; 7
    2222:	fa af       	std	Y+58, r31	; 0x3a
    2224:	e8 ad       	ldd	r30, Y+56	; 0x38
    2226:	f9 ad       	ldd	r31, Y+57	; 0x39
    2228:	00 80       	ld	r0, Z
    222a:	88 ad       	ldd	r24, Y+56	; 0x38
    222c:	99 ad       	ldd	r25, Y+57	; 0x39
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	99 af       	std	Y+57, r25	; 0x39
    2232:	88 af       	std	Y+56, r24	; 0x38
    2234:	ee a9       	ldd	r30, Y+54	; 0x36
    2236:	ff a9       	ldd	r31, Y+55	; 0x37
    2238:	00 82       	st	Z, r0
    223a:	8e a9       	ldd	r24, Y+54	; 0x36
    223c:	9f a9       	ldd	r25, Y+55	; 0x37
    223e:	01 96       	adiw	r24, 0x01	; 1
    2240:	9f ab       	std	Y+55, r25	; 0x37
    2242:	8e ab       	std	Y+54, r24	; 0x36
    2244:	9a ad       	ldd	r25, Y+58	; 0x3a
    2246:	91 50       	subi	r25, 0x01	; 1
    2248:	9a af       	std	Y+58, r25	; 0x3a
    224a:	ea ad       	ldd	r30, Y+58	; 0x3a
    224c:	ee 23       	and	r30, r30
    224e:	51 f7       	brne	.-44     	; 0x2224 <main+0x8a>
	UART_init(&Uart_configuration);
    2250:	ce 01       	movw	r24, r28
    2252:	85 96       	adiw	r24, 0x25	; 37
    2254:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	/* Call Function Create_Password that will Take Password From User
	 * and send it serially using UART to Control_ECU to check Matching
	 * of Two Passwords */
	Create_Password();
    2258:	0e 94 26 14 	call	0x284c	; 0x284c <Create_Password>

	/* Key_Pressed variable that will take an option from user after Entered two Passwrods
	 * and Control_ECU check the validity of Two Passwords */
	uint8 Key_Pressed = 0;
    225c:	1e 8e       	std	Y+30, r1	; 0x1e

	/* Status Variable That will store the state of Passwords entered by user */
	uint8 Status = 0;
    225e:	1d 8e       	std	Y+29, r1	; 0x1d
	uint8 Password[Length_of_Password];

	while(1)
	{
		/* Options always should be displayed on the screen after pass the Correction f two passwords */
		User_Options();
    2260:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <User_Options>

		/* Key Variable that will take an option from user + to Open Door or - to change Password */
		Key_Pressed = KEYPAD_getPressedKey();
    2264:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <KEYPAD_getPressedKey>
    2268:	8e 8f       	std	Y+30, r24	; 0x1e

		/* Clear Screen after Take an option from user */
		LCD_clearScreen();
    226a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

		/* If Key_Pressed by the user is Open Door action */
		if(Key_Pressed == Open_Door)
    226e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2270:	8b 32       	cpi	r24, 0x2B	; 43
    2272:	09 f0       	breq	.+2      	; 0x2276 <main+0xdc>
    2274:	d2 c0       	rjmp	.+420    	; 0x241a <main+0x280>
		{
			/* clear screen */
			LCD_clearScreen();
    2276:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

			/* Ask User to enter a Password */
			LCD_displayString("PLZ ENTER PASS:");
    227a:	80 e6       	ldi	r24, 0x60	; 96
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	aa e7       	ldi	r26, 0x7A	; 122
    2288:	b4 e4       	ldi	r27, 0x44	; 68
    228a:	89 8f       	std	Y+25, r24	; 0x19
    228c:	9a 8f       	std	Y+26, r25	; 0x1a
    228e:	ab 8f       	std	Y+27, r26	; 0x1b
    2290:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	69 8d       	ldd	r22, Y+25	; 0x19
    2294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8d 8b       	std	Y+21, r24	; 0x15
    22ac:	9e 8b       	std	Y+22, r25	; 0x16
    22ae:	af 8b       	std	Y+23, r26	; 0x17
    22b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <main+0x13a>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <main+0x1b8>
	else if (__tmp > 65535)
    22d4:	6d 89       	ldd	r22, Y+21	; 0x15
    22d6:	7e 89       	ldd	r23, Y+22	; 0x16
    22d8:	8f 89       	ldd	r24, Y+23	; 0x17
    22da:	98 8d       	ldd	r25, Y+24	; 0x18
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	69 8d       	ldd	r22, Y+25	; 0x19
    22ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9c 8b       	std	Y+20, r25	; 0x14
    2312:	8b 8b       	std	Y+19, r24	; 0x13
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <main+0x19a>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9a 8b       	std	Y+18, r25	; 0x12
    231c:	89 8b       	std	Y+17, r24	; 0x11
    231e:	89 89       	ldd	r24, Y+17	; 0x11
    2320:	9a 89       	ldd	r25, Y+18	; 0x12
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <main+0x188>
    2326:	9a 8b       	std	Y+18, r25	; 0x12
    2328:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8b 89       	ldd	r24, Y+19	; 0x13
    232c:	9c 89       	ldd	r25, Y+20	; 0x14
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8b 89       	ldd	r24, Y+19	; 0x13
    2336:	9c 89       	ldd	r25, Y+20	; 0x14
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <main+0x17c>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <main+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6d 89       	ldd	r22, Y+21	; 0x15
    2340:	7e 89       	ldd	r23, Y+22	; 0x16
    2342:	8f 89       	ldd	r24, Y+23	; 0x17
    2344:	98 8d       	ldd	r25, Y+24	; 0x18
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9c 8b       	std	Y+20, r25	; 0x14
    2350:	8b 8b       	std	Y+19, r24	; 0x13
    2352:	8b 89       	ldd	r24, Y+19	; 0x13
    2354:	9c 89       	ldd	r25, Y+20	; 0x14
    2356:	98 8b       	std	Y+16, r25	; 0x10
    2358:	8f 87       	std	Y+15, r24	; 0x0f
    235a:	8f 85       	ldd	r24, Y+15	; 0x0f
    235c:	98 89       	ldd	r25, Y+16	; 0x10
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <main+0x1c4>
    2362:	98 8b       	std	Y+16, r25	; 0x10
    2364:	8f 87       	std	Y+15, r24	; 0x0f

			/* This delay made to avoid override occurs on LCD Screen */
			_delay_ms(1000);

			/* Take Password From user */
			Get_Password(Password);
    2366:	ce 01       	movw	r24, r28
    2368:	8c 96       	adiw	r24, 0x2c	; 44
    236a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

			/* Send Ready state to indicate that HMI_ECU will send Message */
			UART_sendByte(Ready);
    236e:	80 e1       	ldi	r24, 0x10	; 16
    2370:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

			/* Send a Password Serially to Control_ECU */
			Send_Password(Password);
    2374:	ce 01       	movw	r24, r28
    2376:	8c 96       	adiw	r24, 0x2c	; 44
    2378:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

			/* User Should Tell Control_ECU what the action done */
			UART_sendByte(Open_Door);
    237c:	8b e2       	ldi	r24, 0x2B	; 43
    237e:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

			/* Control_ECU will send a byte that show status of Password Entered by user and if Password match
			 * Password Exist in EEPROM, Control_ECU will send Open_Door_Action Byte to tell User the door will
			 * be opened  */
			Status = UART_recieveByte();
    2382:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    2386:	8d 8f       	std	Y+29, r24	; 0x1d

			if(Status == Opening_Door_Action)
    2388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238a:	88 35       	cpi	r24, 0x58	; 88
    238c:	19 f4       	brne	.+6      	; 0x2394 <main+0x1fa>
			{
				/* Display Door Unlocking on LCD For 15 seconds and after that display Hold Motor for
				 * 3 second and after that display Door is Locking for 15 seconds */
				Open_Hold_Close();
    238e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Open_Hold_Close>
    2392:	66 cf       	rjmp	.-308    	; 0x2260 <main+0xc6>
			}
			else if(Status == 0)
    2394:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2396:	88 23       	and	r24, r24
    2398:	c9 f5       	brne	.+114    	; 0x240c <main+0x272>
			{
				/* If Control_ECU send to HMI_ECU status byte of 0 this means that password entered by user
				 * doesn't match password exist in EEPROM Driver */
				LCD_clearScreen();
    239a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

				/* Display That will show to user that Password Entered is wrong and ask to Enter it again */
				LCD_displayString("PLZ ENTER PASS:");
    239e:	80 e6       	ldi	r24, 0x60	; 96
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

				/* Take another Password From user */
				Get_Password(Password);
    23a6:	ce 01       	movw	r24, r28
    23a8:	8c 96       	adiw	r24, 0x2c	; 44
    23aa:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

				/* Send it serially to Control_ECU */
				Send_Password(Password);
    23ae:	ce 01       	movw	r24, r28
    23b0:	8c 96       	adiw	r24, 0x2c	; 44
    23b2:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

				/* Receive status from Control_ECU that indicated the status of Password Entered */
				Status = UART_recieveByte();
    23b6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    23ba:	8d 8f       	std	Y+29, r24	; 0x1d

				/* If Status is True */
				if(Status == 1)
    23bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	19 f4       	brne	.+6      	; 0x23c8 <main+0x22e>
				{
					/* Display Door Unlocking on LCD For 15 seconds and after that display Hold Motor for
					 * 3 second and after that display Door is Locking for 15 seconds */
					Open_Hold_Close();
    23c2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Open_Hold_Close>
    23c6:	4c cf       	rjmp	.-360    	; 0x2260 <main+0xc6>
				}
				else if(Status == 0)
    23c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ca:	88 23       	and	r24, r24
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <main+0x236>
    23ce:	48 cf       	rjmp	.-368    	; 0x2260 <main+0xc6>
				{
					LCD_clearScreen();
    23d0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

					/* Display That will show to user that Password Entered is wrong and ask to Enter it again */
					LCD_displayString("PLZ ENTER PASS:");
    23d4:	80 e6       	ldi	r24, 0x60	; 96
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

					/* Take another Password From user */
					Get_Password(Password);
    23dc:	ce 01       	movw	r24, r28
    23de:	8c 96       	adiw	r24, 0x2c	; 44
    23e0:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

					/* Send it serially to Control_ECU */
					Send_Password(Password);
    23e4:	ce 01       	movw	r24, r28
    23e6:	8c 96       	adiw	r24, 0x2c	; 44
    23e8:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

					/* Receive status from Control_ECU that indicated the status of Password Entered */
					Status = UART_recieveByte();
    23ec:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    23f0:	8d 8f       	std	Y+29, r24	; 0x1d

					/* If Status is True */
					if(Status == 1)
    23f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	19 f4       	brne	.+6      	; 0x23fe <main+0x264>
					{
						/* Display Door Unlocking on LCD For 15 seconds and after that display Hold Motor for
				         * 3 second and after that display Door is Locking for 15 seconds */
						Open_Hold_Close();
    23f8:	0e 94 21 15 	call	0x2a42	; 0x2a42 <Open_Hold_Close>
    23fc:	31 cf       	rjmp	.-414    	; 0x2260 <main+0xc6>
					}
					else if(Status == 0)
    23fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2400:	88 23       	and	r24, r24
    2402:	09 f0       	breq	.+2      	; 0x2406 <main+0x26c>
    2404:	2d cf       	rjmp	.-422    	; 0x2260 <main+0xc6>
					{
						/* Danger_Message Function will be called because Password Entered wrong for 3 times repeatedly*/
						Danger_Message();
    2406:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <Danger_Message>
    240a:	2a cf       	rjmp	.-428    	; 0x2260 <main+0xc6>
					}
				}
			}

			else if(Status == Danger)
    240c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    240e:	83 33       	cpi	r24, 0x33	; 51
    2410:	09 f0       	breq	.+2      	; 0x2414 <main+0x27a>
    2412:	26 cf       	rjmp	.-436    	; 0x2260 <main+0xc6>
			{
				Danger_Message();
    2414:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <Danger_Message>
    2418:	23 cf       	rjmp	.-442    	; 0x2260 <main+0xc6>
			}

		}
		/* If Key_Pressed by the user is Change Password action */
		else if(Key_Pressed == ChangePass)
    241a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    241c:	8d 32       	cpi	r24, 0x2D	; 45
    241e:	09 f0       	breq	.+2      	; 0x2422 <main+0x288>
    2420:	1f cf       	rjmp	.-450    	; 0x2260 <main+0xc6>
		{
			LCD_clearScreen();
    2422:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

			/* Ask User to enter a Password */
			LCD_displayString("PLZ ENTER PASS:");
    2426:	80 e6       	ldi	r24, 0x60	; 96
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	aa e7       	ldi	r26, 0x7A	; 122
    2434:	b4 e4       	ldi	r27, 0x44	; 68
    2436:	8b 87       	std	Y+11, r24	; 0x0b
    2438:	9c 87       	std	Y+12, r25	; 0x0c
    243a:	ad 87       	std	Y+13, r26	; 0x0d
    243c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2440:	7c 85       	ldd	r23, Y+12	; 0x0c
    2442:	8d 85       	ldd	r24, Y+13	; 0x0d
    2444:	9e 85       	ldd	r25, Y+14	; 0x0e
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a ef       	ldi	r20, 0xFA	; 250
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8f 83       	std	Y+7, r24	; 0x07
    2458:	98 87       	std	Y+8, r25	; 0x08
    245a:	a9 87       	std	Y+9, r26	; 0x09
    245c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    245e:	6f 81       	ldd	r22, Y+7	; 0x07
    2460:	78 85       	ldd	r23, Y+8	; 0x08
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	9a 85       	ldd	r25, Y+10	; 0x0a
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <main+0x2e6>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <main+0x364>
	else if (__tmp > 65535)
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <main+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	6b 85       	ldd	r22, Y+11	; 0x0b
    249a:	7c 85       	ldd	r23, Y+12	; 0x0c
    249c:	8d 85       	ldd	r24, Y+13	; 0x0d
    249e:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <main+0x346>
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9c 83       	std	Y+4, r25	; 0x04
    24c8:	8b 83       	std	Y+3, r24	; 0x03
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <main+0x334>
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <main+0x328>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <main+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <main+0x370>
    250e:	9a 83       	std	Y+2, r25	; 0x02
    2510:	89 83       	std	Y+1, r24	; 0x01

			/* This delay made to avoid override occurs on LCD Screen */
			_delay_ms(1000);

			/* Take Password From user */
			Get_Password(Password);
    2512:	ce 01       	movw	r24, r28
    2514:	8c 96       	adiw	r24, 0x2c	; 44
    2516:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

			/* Send Ready state to indicate that HMI_ECU will send Message */
			UART_sendByte(Ready);
    251a:	80 e1       	ldi	r24, 0x10	; 16
    251c:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

			/* Send a Password Serially to Control_ECU */
			Send_Password(Password);
    2520:	ce 01       	movw	r24, r28
    2522:	8c 96       	adiw	r24, 0x2c	; 44
    2524:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

			/* User Should Tell Control_ECU what the action done */
			UART_sendByte(ChangePass);
    2528:	8d e2       	ldi	r24, 0x2D	; 45
    252a:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

			/* Control_ECU will send a byte that show status of Password Entered by user and if Password match
			 * Password Exist in EEPROM, Control_ECU will send Change_Password_Action Byte to tell to repeat
			 * step1 again */
			Status = UART_recieveByte();
    252e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    2532:	8d 8f       	std	Y+29, r24	; 0x1d

			/* If Status received is Changing_Password_Action ---> Password is correct */
			if(Status == Changing_Password_Action)
    2534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2536:	8c 32       	cpi	r24, 0x2C	; 44
    2538:	19 f4       	brne	.+6      	; 0x2540 <main+0x3a6>
			{
				/* Repeat step1 again */
				Create_Password();
    253a:	0e 94 26 14 	call	0x284c	; 0x284c <Create_Password>
    253e:	90 ce       	rjmp	.-736    	; 0x2260 <main+0xc6>
			}

			else if(Status == Danger)
    2540:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2542:	83 33       	cpi	r24, 0x33	; 51
    2544:	19 f4       	brne	.+6      	; 0x254c <main+0x3b2>
			{
				/* if Entered 3 wrong repeated passwords */
				Danger_Message();
    2546:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <Danger_Message>
    254a:	8a ce       	rjmp	.-748    	; 0x2260 <main+0xc6>
			}
			else if(Status == 0)
    254c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254e:	88 23       	and	r24, r24
    2550:	09 f0       	breq	.+2      	; 0x2554 <main+0x3ba>
    2552:	86 ce       	rjmp	.-756    	; 0x2260 <main+0xc6>
			{

				LCD_clearScreen();
    2554:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

				/* Ask user to enter Password again in case of the first time is wrong */
				LCD_displayString("PLZ ENTER PASS:");
    2558:	80 e6       	ldi	r24, 0x60	; 96
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

				/* take the second Password from user*/
				Get_Password(Password);
    2560:	ce 01       	movw	r24, r28
    2562:	8c 96       	adiw	r24, 0x2c	; 44
    2564:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

				/* Send a Password taken from user serially using UART */
				Send_Password(Password);
    2568:	ce 01       	movw	r24, r28
    256a:	8c 96       	adiw	r24, 0x2c	; 44
    256c:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

				/* Receive the status of Password entered by user */
				Status = UART_recieveByte();
    2570:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    2574:	8d 8f       	std	Y+29, r24	; 0x1d

				/* If two password are true */
				if(Status == 1)
    2576:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	19 f4       	brne	.+6      	; 0x2582 <main+0x3e8>
				{
					/* Repeat step 1 */
					Create_Password();
    257c:	0e 94 26 14 	call	0x284c	; 0x284c <Create_Password>
    2580:	6f ce       	rjmp	.-802    	; 0x2260 <main+0xc6>
				}
				else if(Status == 0)
    2582:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2584:	88 23       	and	r24, r24
    2586:	09 f0       	breq	.+2      	; 0x258a <main+0x3f0>
    2588:	6b ce       	rjmp	.-810    	; 0x2260 <main+0xc6>
				{

					LCD_clearScreen();
    258a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

					/* Ask user to enter Password again in case of the first time is wrong */
					LCD_displayString("PLZ ENTER PASS:");
    258e:	80 e6       	ldi	r24, 0x60	; 96
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

					/* take the second Password from user*/
					Get_Password(Password);
    2596:	ce 01       	movw	r24, r28
    2598:	8c 96       	adiw	r24, 0x2c	; 44
    259a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

					/* Send a Password taken from user serially using UART */
					Send_Password(Password);
    259e:	ce 01       	movw	r24, r28
    25a0:	8c 96       	adiw	r24, 0x2c	; 44
    25a2:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

					/* Receive the status of Password entered by user */
					Status = UART_recieveByte();
    25a6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    25aa:	8d 8f       	std	Y+29, r24	; 0x1d

					/* if status true*/
					if(Status == 1)
    25ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	19 f4       	brne	.+6      	; 0x25b8 <main+0x41e>
					{
						/* Repeat step 1 */
						Create_Password();
    25b2:	0e 94 26 14 	call	0x284c	; 0x284c <Create_Password>
    25b6:	54 ce       	rjmp	.-856    	; 0x2260 <main+0xc6>
					}
					else if(Status == 0)
    25b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ba:	88 23       	and	r24, r24
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <main+0x426>
    25be:	50 ce       	rjmp	.-864    	; 0x2260 <main+0xc6>
					{
						/* After entering 3 wrong repeated passwords Danger Message will be shown on LCD*/
						Danger_Message();
    25c0:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <Danger_Message>
    25c4:	4d ce       	rjmp	.-870    	; 0x2260 <main+0xc6>

000025c6 <Get_Password>:
* [Description]: This Function Take a Password entered from user through Keypad
* [Arguments]: uint8* Password that take Key Pressed by user and save it on this variable
* [Returns]: No Returns Type
*****************************************************************************/
void Get_Password(uint8* Password)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	62 97       	sbiw	r28, 0x12	; 18
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
	uint8 Key_Pressed;

	/*Move a cursor of LCD to second Row to Print Password Entered by user */
	LCD_moveCursor(1, 0);
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_moveCursor>

	/* Take Pressed key from user until */
	for(uint8 i = 0 ; i < Length_of_Password ; i++)
    25e6:	1f 86       	std	Y+15, r1	; 0x0f
    25e8:	85 c0       	rjmp	.+266    	; 0x26f4 <Get_Password+0x12e>
	{
		/* Get Key_Pressed by user */
		Key_Pressed = KEYPAD_getPressedKey();
    25ea:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <KEYPAD_getPressedKey>
    25ee:	88 8b       	std	Y+16, r24	; 0x10

		/* Store Password */
		Password[i] = Key_Pressed;
    25f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	89 89       	ldd	r24, Y+17	; 0x11
    25f8:	9a 89       	ldd	r25, Y+18	; 0x12
    25fa:	fc 01       	movw	r30, r24
    25fc:	e2 0f       	add	r30, r18
    25fe:	f3 1f       	adc	r31, r19
    2600:	88 89       	ldd	r24, Y+16	; 0x10
    2602:	80 83       	st	Z, r24

		/* Display on LCD Encrypted PAssword (*) */
		LCD_displayCharacter('*');
    2604:	8a e2       	ldi	r24, 0x2A	; 42
    2606:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LCD_displayCharacter>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	aa ef       	ldi	r26, 0xFA	; 250
    2610:	b3 e4       	ldi	r27, 0x43	; 67
    2612:	8b 87       	std	Y+11, r24	; 0x0b
    2614:	9c 87       	std	Y+12, r25	; 0x0c
    2616:	ad 87       	std	Y+13, r26	; 0x0d
    2618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	6b 85       	ldd	r22, Y+11	; 0x0b
    261c:	7c 85       	ldd	r23, Y+12	; 0x0c
    261e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2620:	9e 85       	ldd	r25, Y+14	; 0x0e
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8f 83       	std	Y+7, r24	; 0x07
    2634:	98 87       	std	Y+8, r25	; 0x08
    2636:	a9 87       	std	Y+9, r26	; 0x09
    2638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <Get_Password+0x96>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	3f c0       	rjmp	.+126    	; 0x26da <Get_Password+0x114>
	else if (__tmp > 65535)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <Get_Password+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	6b 85       	ldd	r22, Y+11	; 0x0b
    2676:	7c 85       	ldd	r23, Y+12	; 0x0c
    2678:	8d 85       	ldd	r24, Y+13	; 0x0d
    267a:	9e 85       	ldd	r25, Y+14	; 0x0e
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <Get_Password+0xf6>
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <Get_Password+0xe4>
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	9e 81       	ldd	r25, Y+6	; 0x06
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <Get_Password+0xd8>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <Get_Password+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <Get_Password+0x120>
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01

	/*Move a cursor of LCD to second Row to Print Password Entered by user */
	LCD_moveCursor(1, 0);

	/* Take Pressed key from user until */
	for(uint8 i = 0 ; i < Length_of_Password ; i++)
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	8f 87       	std	Y+15, r24	; 0x0f
    26f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f6:	85 30       	cpi	r24, 0x05	; 5
    26f8:	08 f4       	brcc	.+2      	; 0x26fc <Get_Password+0x136>
    26fa:	77 cf       	rjmp	.-274    	; 0x25ea <Get_Password+0x24>

		_delay_ms(500);
	}

	/* Don't Exit From this Fucntion Until user entered Enter Key */
	while(KEYPAD_getPressedKey() != Enter_Key){}
    26fc:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <KEYPAD_getPressedKey>
    2700:	8d 30       	cpi	r24, 0x0D	; 13
    2702:	e1 f7       	brne	.-8      	; 0x26fc <Get_Password+0x136>
}
    2704:	62 96       	adiw	r28, 0x12	; 18
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <Send_Password>:
*                Driver to another Micro-controller
* [Arguments]: uint8* Password that Password save on it
* [Returns]: No Returns Type
*****************************************************************************/
void Send_Password(uint8* Password)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	61 97       	sbiw	r28, 0x11	; 17
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	99 8b       	std	Y+17, r25	; 0x11
    272c:	88 8b       	std	Y+16, r24	; 0x10
	/* Loop until Reach the length of Password */
	for(uint8 i = 0 ; i < Length_of_Password ; i++)
    272e:	1f 86       	std	Y+15, r1	; 0x0f
    2730:	80 c0       	rjmp	.+256    	; 0x2832 <Send_Password+0x11c>
	{
		/*Send a Password Serially to another MCU*/

		UART_sendByte(Password[i]);
    2732:	8f 85       	ldd	r24, Y+15	; 0x0f
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	88 89       	ldd	r24, Y+16	; 0x10
    273a:	99 89       	ldd	r25, Y+17	; 0x11
    273c:	fc 01       	movw	r30, r24
    273e:	e2 0f       	add	r30, r18
    2740:	f3 1f       	adc	r31, r19
    2742:	80 81       	ld	r24, Z
    2744:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a8 e4       	ldi	r26, 0x48	; 72
    274e:	b2 e4       	ldi	r27, 0x42	; 66
    2750:	8b 87       	std	Y+11, r24	; 0x0b
    2752:	9c 87       	std	Y+12, r25	; 0x0c
    2754:	ad 87       	std	Y+13, r26	; 0x0d
    2756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8f 83       	std	Y+7, r24	; 0x07
    2772:	98 87       	std	Y+8, r25	; 0x08
    2774:	a9 87       	std	Y+9, r26	; 0x09
    2776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	2c f4       	brge	.+10     	; 0x279a <Send_Password+0x84>
		__ticks = 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	3f c0       	rjmp	.+126    	; 0x2818 <Send_Password+0x102>
	else if (__tmp > 65535)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	4c f5       	brge	.+82     	; 0x2804 <Send_Password+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	bc 01       	movw	r22, r24
    27cc:	cd 01       	movw	r24, r26
    27ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	0f c0       	rjmp	.+30     	; 0x27fa <Send_Password+0xe4>
    27dc:	88 ec       	ldi	r24, 0xC8	; 200
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <Send_Password+0xd2>
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	69 f7       	brne	.-38     	; 0x27dc <Send_Password+0xc6>
    2802:	14 c0       	rjmp	.+40     	; 0x282c <Send_Password+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2804:	6f 81       	ldd	r22, Y+7	; 0x07
    2806:	78 85       	ldd	r23, Y+8	; 0x08
    2808:	89 85       	ldd	r24, Y+9	; 0x09
    280a:	9a 85       	ldd	r25, Y+10	; 0x0a
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	8d 81       	ldd	r24, Y+5	; 0x05
    281a:	9e 81       	ldd	r25, Y+6	; 0x06
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <Send_Password+0x10e>
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
* [Returns]: No Returns Type
*****************************************************************************/
void Send_Password(uint8* Password)
{
	/* Loop until Reach the length of Password */
	for(uint8 i = 0 ; i < Length_of_Password ; i++)
    282c:	8f 85       	ldd	r24, Y+15	; 0x0f
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	8f 87       	std	Y+15, r24	; 0x0f
    2832:	8f 85       	ldd	r24, Y+15	; 0x0f
    2834:	85 30       	cpi	r24, 0x05	; 5
    2836:	08 f4       	brcc	.+2      	; 0x283a <Send_Password+0x124>
    2838:	7c cf       	rjmp	.-264    	; 0x2732 <Send_Password+0x1c>
		UART_sendByte(Password[i]);

		/*Simple delay between operations*/
		_delay_ms(50);
	}
}
    283a:	61 96       	adiw	r28, 0x11	; 17
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <Create_Password>:
*                LCD Should Display Un-matched Two Passwords and ask again to enter Two Passwords
* [Arguments]: No Arguments
* [Returns]: No Returns Type
*****************************************************************************/
void Create_Password(void)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	69 97       	sbiw	r28, 0x19	; 25
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
	/* Create Two arrays of Length of Password to send them to another MCU */
	uint8 First_Password[Length_of_Password];
	uint8 Second_Password[Length_of_Password];

	uint8 status = 0;
    2860:	1f 86       	std	Y+15, r1	; 0x0f
    2862:	af c0       	rjmp	.+350    	; 0x29c2 <Create_Password+0x176>

	/* When The state of Two password Unmatched, Again ask user to enter Two Matched Passwords to exit Loop*/
	while(status == 0)
	{
		LCD_clearScreen();
    2864:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

		/* Display on Screen to tell user what should him do */
		LCD_displayString("PLZ ENTER PASS:");
    2868:	80 e7       	ldi	r24, 0x70	; 112
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

		/* Get First Password From User and store it in First_Password array */
		Get_Password(First_Password);
    2870:	ce 01       	movw	r24, r28
    2872:	40 96       	adiw	r24, 0x10	; 16
    2874:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

		/* Tell another MCU I will send a byte */
		UART_sendByte(Ready);
    2878:	80 e1       	ldi	r24, 0x10	; 16
    287a:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

		/* If Control_ECU send HMI_ECU Ready byte so, HMI_ECU will start sending password to Control_ECU*/
		while(UART_recieveByte()!= Ready);
    287e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    2882:	80 31       	cpi	r24, 0x10	; 16
    2884:	e1 f7       	brne	.-8      	; 0x287e <Create_Password+0x32>

		/* Send Password After receiving Ready byte */
		Send_Password(First_Password);
    2886:	ce 01       	movw	r24, r28
    2888:	40 96       	adiw	r24, 0x10	; 16
    288a:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

		/* Clear Screen */
		LCD_clearScreen();
    288e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

		/* ask user to Enter another Password to check Two matched Passwords */
		LCD_displayString("PLZ REENTER PASS:");
    2892:	80 e8       	ldi	r24, 0x80	; 128
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

		/* Get Second Password From User and store it in Second_Password array */
		Get_Password(Second_Password);
    289a:	ce 01       	movw	r24, r28
    289c:	45 96       	adiw	r24, 0x15	; 21
    289e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Get_Password>

		/* Tell another MCU I will send a byte */
		UART_sendByte(Ready);
    28a2:	80 e1       	ldi	r24, 0x10	; 16
    28a4:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

		/* If Control_ECU send HMI_ECU Ready byte so, HMI_ECU will start sending password to Control_ECU*/
		while(UART_recieveByte()!=Ready);
    28a8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    28ac:	80 31       	cpi	r24, 0x10	; 16
    28ae:	e1 f7       	brne	.-8      	; 0x28a8 <Create_Password+0x5c>

		/* Send Password After receiving Ready byte */
		Send_Password(Second_Password);
    28b0:	ce 01       	movw	r24, r28
    28b2:	45 96       	adiw	r24, 0x15	; 21
    28b4:	0e 94 8b 13 	call	0x2716	; 0x2716 <Send_Password>

		/* If Control_ECU send HMI_ECU Ready byte so, HMI_ECU will start receiving state from Control_ECU*/
		while(UART_recieveByte() != Ready){}
    28b8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    28bc:	80 31       	cpi	r24, 0x10	; 16
    28be:	e1 f7       	brne	.-8      	; 0x28b8 <Create_Password+0x6c>

		/*HMI_ECU Receive status of Two Password (Matched , unmatched)*/
		status = UART_recieveByte();
    28c0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    28c4:	8f 87       	std	Y+15, r24	; 0x0f

		/* If status not matched */
		if(status == 0)
    28c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c8:	88 23       	and	r24, r24
    28ca:	09 f0       	breq	.+2      	; 0x28ce <Create_Password+0x82>
    28cc:	7a c0       	rjmp	.+244    	; 0x29c2 <Create_Password+0x176>
		{
			LCD_clearScreen();
    28ce:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

			/* display on screen Not matched to tell user about wrong action done */
			LCD_displayString("NOT MATCHED");
    28d2:	82 e9       	ldi	r24, 0x92	; 146
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	aa e7       	ldi	r26, 0x7A	; 122
    28e0:	b4 e4       	ldi	r27, 0x44	; 68
    28e2:	8b 87       	std	Y+11, r24	; 0x0b
    28e4:	9c 87       	std	Y+12, r25	; 0x0c
    28e6:	ad 87       	std	Y+13, r26	; 0x0d
    28e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a ef       	ldi	r20, 0xFA	; 250
    28f8:	54 e4       	ldi	r21, 0x44	; 68
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8f 83       	std	Y+7, r24	; 0x07
    2904:	98 87       	std	Y+8, r25	; 0x08
    2906:	a9 87       	std	Y+9, r26	; 0x09
    2908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291e:	88 23       	and	r24, r24
    2920:	2c f4       	brge	.+10     	; 0x292c <Create_Password+0xe0>
		__ticks = 1;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	3f c0       	rjmp	.+126    	; 0x29aa <Create_Password+0x15e>
	else if (__tmp > 65535)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f e7       	ldi	r20, 0x7F	; 127
    293a:	57 e4       	ldi	r21, 0x47	; 71
    293c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2940:	18 16       	cp	r1, r24
    2942:	4c f5       	brge	.+82     	; 0x2996 <Create_Password+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	0f c0       	rjmp	.+30     	; 0x298c <Create_Password+0x140>
    296e:	88 ec       	ldi	r24, 0xC8	; 200
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <Create_Password+0x12e>
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	69 f7       	brne	.-38     	; 0x296e <Create_Password+0x122>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <Create_Password+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <Create_Password+0x16a>
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01

			/* Delay of showing this message */
			_delay_ms(1000);

			LCD_clearScreen();
    29be:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>
	uint8 Second_Password[Length_of_Password];

	uint8 status = 0;

	/* When The state of Two password Unmatched, Again ask user to enter Two Matched Passwords to exit Loop*/
	while(status == 0)
    29c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c4:	88 23       	and	r24, r24
    29c6:	09 f4       	brne	.+2      	; 0x29ca <Create_Password+0x17e>
    29c8:	4d cf       	rjmp	.-358    	; 0x2864 <Create_Password+0x18>
			_delay_ms(1000);

			LCD_clearScreen();
		}
	}
	LCD_clearScreen();
    29ca:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>
}
    29ce:	69 96       	adiw	r28, 0x19	; 25
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <User_Options>:
* [Description]: This Function always display Options that available to user
* [Arguments]: No Arguments
* [Returns]: No Returns Type
*****************************************************************************/
void User_Options(void)
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    29e8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

	/* Display Open Door Option on LCD */
	LCD_displayStringRowCol(0, 0, "+ : Open Door");
    29ec:	2e e9       	ldi	r18, 0x9E	; 158
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	a9 01       	movw	r20, r18
    29f6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_displayStringRowCol>

	/* Display change Password Option on LCD */
	LCD_displayStringRowCol(1, 0, "- : Change Pass");
    29fa:	2c ea       	ldi	r18, 0xAC	; 172
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	a9 01       	movw	r20, r18
    2a04:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LCD_displayStringRowCol>
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <Callback>:
*                Timer1 Driver
* [Arguments]: No Arguments
* [Returns]: No Returns Type
*****************************************************************************/
void Callback(void)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	g_ticks ++;
    2a16:	80 91 0e 01 	lds	r24, 0x010E
    2a1a:	90 91 0f 01 	lds	r25, 0x010F
    2a1e:	a0 91 10 01 	lds	r26, 0x0110
    2a22:	b0 91 11 01 	lds	r27, 0x0111
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	b1 1d       	adc	r27, r1
    2a2c:	80 93 0e 01 	sts	0x010E, r24
    2a30:	90 93 0f 01 	sts	0x010F, r25
    2a34:	a0 93 10 01 	sts	0x0110, r26
    2a38:	b0 93 11 01 	sts	0x0111, r27
}
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <Open_Hold_Close>:
*                correct password. Status such as (Door is Unlocking, Door is Locking , Door is hold)
* [Arguments]: No Arguments
* [Returns]: No Returns Type
*****************************************************************************/
void Open_Hold_Close(void)
{
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
	g_ticks = 0;
    2a4a:	10 92 0e 01 	sts	0x010E, r1
    2a4e:	10 92 0f 01 	sts	0x010F, r1
    2a52:	10 92 10 01 	sts	0x0110, r1
    2a56:	10 92 11 01 	sts	0x0111, r1

	LCD_clearScreen();
    2a5a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

	/* Display Door Unlocking when user entered a correct Password */
	LCD_displayString("DOOR UNLOCKING");
    2a5e:	8c eb       	ldi	r24, 0xBC	; 188
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

	/* time of Message will be shown on the screen */
	while(g_ticks < Open_Time){}
    2a66:	80 91 0e 01 	lds	r24, 0x010E
    2a6a:	90 91 0f 01 	lds	r25, 0x010F
    2a6e:	a0 91 10 01 	lds	r26, 0x0110
    2a72:	b0 91 11 01 	lds	r27, 0x0111
    2a76:	8a 30       	cpi	r24, 0x0A	; 10
    2a78:	91 05       	cpc	r25, r1
    2a7a:	a1 05       	cpc	r26, r1
    2a7c:	b1 05       	cpc	r27, r1
    2a7e:	98 f3       	brcs	.-26     	; 0x2a66 <Open_Hold_Close+0x24>

	LCD_clearScreen();
    2a80:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

	/* Display Hold motor after door is completely opened  */
	LCD_displayString("HOLD MOTOR");
    2a84:	8b ec       	ldi	r24, 0xCB	; 203
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

	/* time of Message will be shown on the screen */
	while(g_ticks < Open_Time + Hold_Time){}
    2a8c:	80 91 0e 01 	lds	r24, 0x010E
    2a90:	90 91 0f 01 	lds	r25, 0x010F
    2a94:	a0 91 10 01 	lds	r26, 0x0110
    2a98:	b0 91 11 01 	lds	r27, 0x0111
    2a9c:	8d 30       	cpi	r24, 0x0D	; 13
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	a1 05       	cpc	r26, r1
    2aa2:	b1 05       	cpc	r27, r1
    2aa4:	98 f3       	brcs	.-26     	; 0x2a8c <Open_Hold_Close+0x4a>

	LCD_clearScreen();
    2aa6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

	/* Display unlocking door when door wait for some second  */
	LCD_displayString("DOOR IS LOCKING");
    2aaa:	86 ed       	ldi	r24, 0xD6	; 214
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

	/* time of Message will be shown on the screen */
	while(g_ticks < Open_Time + Hold_Time + Close_Time){}
    2ab2:	80 91 0e 01 	lds	r24, 0x010E
    2ab6:	90 91 0f 01 	lds	r25, 0x010F
    2aba:	a0 91 10 01 	lds	r26, 0x0110
    2abe:	b0 91 11 01 	lds	r27, 0x0111
    2ac2:	87 31       	cpi	r24, 0x17	; 23
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	a1 05       	cpc	r26, r1
    2ac8:	b1 05       	cpc	r27, r1
    2aca:	98 f3       	brcs	.-26     	; 0x2ab2 <Open_Hold_Close+0x70>

	LCD_clearScreen();
    2acc:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>
}
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <Danger_Message>:
* [Description]: This Function display Warning message after entering 3-times Wrong Password
* [Arguments]: No Arguments
* [Returns]: No Returns Type
*****************************************************************************/
void Danger_Message(void)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
	g_ticks = 0;
    2ade:	10 92 0e 01 	sts	0x010E, r1
    2ae2:	10 92 0f 01 	sts	0x010F, r1
    2ae6:	10 92 10 01 	sts	0x0110, r1
    2aea:	10 92 11 01 	sts	0x0111, r1

	LCD_clearScreen();
    2aee:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clearScreen>

	/* Display Wrong Message on Screen To tell user about his wrong action */
	LCD_displayString("REPEATED WRONG!");
    2af2:	86 ee       	ldi	r24, 0xE6	; 230
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_displayString>

	/* time of Message will be shown on the screen */
	while(g_ticks < Danger_Time){}
    2afa:	80 91 0e 01 	lds	r24, 0x010E
    2afe:	90 91 0f 01 	lds	r25, 0x010F
    2b02:	a0 91 10 01 	lds	r26, 0x0110
    2b06:	b0 91 11 01 	lds	r27, 0x0111
    2b0a:	8c 33       	cpi	r24, 0x3C	; 60
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	a1 05       	cpc	r26, r1
    2b10:	b1 05       	cpc	r27, r1
    2b12:	98 f3       	brcs	.-26     	; 0x2afa <Danger_Message+0x24>
}
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <__udivmodsi4>:
    2b1a:	a1 e2       	ldi	r26, 0x21	; 33
    2b1c:	1a 2e       	mov	r1, r26
    2b1e:	aa 1b       	sub	r26, r26
    2b20:	bb 1b       	sub	r27, r27
    2b22:	fd 01       	movw	r30, r26
    2b24:	0d c0       	rjmp	.+26     	; 0x2b40 <__udivmodsi4_ep>

00002b26 <__udivmodsi4_loop>:
    2b26:	aa 1f       	adc	r26, r26
    2b28:	bb 1f       	adc	r27, r27
    2b2a:	ee 1f       	adc	r30, r30
    2b2c:	ff 1f       	adc	r31, r31
    2b2e:	a2 17       	cp	r26, r18
    2b30:	b3 07       	cpc	r27, r19
    2b32:	e4 07       	cpc	r30, r20
    2b34:	f5 07       	cpc	r31, r21
    2b36:	20 f0       	brcs	.+8      	; 0x2b40 <__udivmodsi4_ep>
    2b38:	a2 1b       	sub	r26, r18
    2b3a:	b3 0b       	sbc	r27, r19
    2b3c:	e4 0b       	sbc	r30, r20
    2b3e:	f5 0b       	sbc	r31, r21

00002b40 <__udivmodsi4_ep>:
    2b40:	66 1f       	adc	r22, r22
    2b42:	77 1f       	adc	r23, r23
    2b44:	88 1f       	adc	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	1a 94       	dec	r1
    2b4a:	69 f7       	brne	.-38     	; 0x2b26 <__udivmodsi4_loop>
    2b4c:	60 95       	com	r22
    2b4e:	70 95       	com	r23
    2b50:	80 95       	com	r24
    2b52:	90 95       	com	r25
    2b54:	9b 01       	movw	r18, r22
    2b56:	ac 01       	movw	r20, r24
    2b58:	bd 01       	movw	r22, r26
    2b5a:	cf 01       	movw	r24, r30
    2b5c:	08 95       	ret

00002b5e <__prologue_saves__>:
    2b5e:	2f 92       	push	r2
    2b60:	3f 92       	push	r3
    2b62:	4f 92       	push	r4
    2b64:	5f 92       	push	r5
    2b66:	6f 92       	push	r6
    2b68:	7f 92       	push	r7
    2b6a:	8f 92       	push	r8
    2b6c:	9f 92       	push	r9
    2b6e:	af 92       	push	r10
    2b70:	bf 92       	push	r11
    2b72:	cf 92       	push	r12
    2b74:	df 92       	push	r13
    2b76:	ef 92       	push	r14
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	ca 1b       	sub	r28, r26
    2b88:	db 0b       	sbc	r29, r27
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	09 94       	ijmp

00002b96 <__epilogue_restores__>:
    2b96:	2a 88       	ldd	r2, Y+18	; 0x12
    2b98:	39 88       	ldd	r3, Y+17	; 0x11
    2b9a:	48 88       	ldd	r4, Y+16	; 0x10
    2b9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ba0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ba2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ba4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ba6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ba8:	b9 84       	ldd	r11, Y+9	; 0x09
    2baa:	c8 84       	ldd	r12, Y+8	; 0x08
    2bac:	df 80       	ldd	r13, Y+7	; 0x07
    2bae:	ee 80       	ldd	r14, Y+6	; 0x06
    2bb0:	fd 80       	ldd	r15, Y+5	; 0x05
    2bb2:	0c 81       	ldd	r16, Y+4	; 0x04
    2bb4:	1b 81       	ldd	r17, Y+3	; 0x03
    2bb6:	aa 81       	ldd	r26, Y+2	; 0x02
    2bb8:	b9 81       	ldd	r27, Y+1	; 0x01
    2bba:	ce 0f       	add	r28, r30
    2bbc:	d1 1d       	adc	r29, r1
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	ed 01       	movw	r28, r26
    2bca:	08 95       	ret

00002bcc <itoa>:
    2bcc:	fb 01       	movw	r30, r22
    2bce:	9f 01       	movw	r18, r30
    2bd0:	e8 94       	clt
    2bd2:	42 30       	cpi	r20, 0x02	; 2
    2bd4:	c4 f0       	brlt	.+48     	; 0x2c06 <itoa+0x3a>
    2bd6:	45 32       	cpi	r20, 0x25	; 37
    2bd8:	b4 f4       	brge	.+44     	; 0x2c06 <itoa+0x3a>
    2bda:	4a 30       	cpi	r20, 0x0A	; 10
    2bdc:	29 f4       	brne	.+10     	; 0x2be8 <itoa+0x1c>
    2bde:	97 fb       	bst	r25, 7
    2be0:	1e f4       	brtc	.+6      	; 0x2be8 <itoa+0x1c>
    2be2:	90 95       	com	r25
    2be4:	81 95       	neg	r24
    2be6:	9f 4f       	sbci	r25, 0xFF	; 255
    2be8:	64 2f       	mov	r22, r20
    2bea:	77 27       	eor	r23, r23
    2bec:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__udivmodhi4>
    2bf0:	80 5d       	subi	r24, 0xD0	; 208
    2bf2:	8a 33       	cpi	r24, 0x3A	; 58
    2bf4:	0c f0       	brlt	.+2      	; 0x2bf8 <itoa+0x2c>
    2bf6:	89 5d       	subi	r24, 0xD9	; 217
    2bf8:	81 93       	st	Z+, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	a1 f7       	brne	.-24     	; 0x2be8 <itoa+0x1c>
    2c00:	16 f4       	brtc	.+4      	; 0x2c06 <itoa+0x3a>
    2c02:	5d e2       	ldi	r21, 0x2D	; 45
    2c04:	51 93       	st	Z+, r21
    2c06:	10 82       	st	Z, r1
    2c08:	c9 01       	movw	r24, r18
    2c0a:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <strrev>

00002c0e <strrev>:
    2c0e:	dc 01       	movw	r26, r24
    2c10:	fc 01       	movw	r30, r24
    2c12:	67 2f       	mov	r22, r23
    2c14:	71 91       	ld	r23, Z+
    2c16:	77 23       	and	r23, r23
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <strrev+0x4>
    2c1a:	32 97       	sbiw	r30, 0x02	; 2
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <strrev+0x18>
    2c1e:	7c 91       	ld	r23, X
    2c20:	6d 93       	st	X+, r22
    2c22:	70 83       	st	Z, r23
    2c24:	62 91       	ld	r22, -Z
    2c26:	ae 17       	cp	r26, r30
    2c28:	bf 07       	cpc	r27, r31
    2c2a:	c8 f3       	brcs	.-14     	; 0x2c1e <strrev+0x10>
    2c2c:	08 95       	ret

00002c2e <__udivmodhi4>:
    2c2e:	aa 1b       	sub	r26, r26
    2c30:	bb 1b       	sub	r27, r27
    2c32:	51 e1       	ldi	r21, 0x11	; 17
    2c34:	07 c0       	rjmp	.+14     	; 0x2c44 <__udivmodhi4_ep>

00002c36 <__udivmodhi4_loop>:
    2c36:	aa 1f       	adc	r26, r26
    2c38:	bb 1f       	adc	r27, r27
    2c3a:	a6 17       	cp	r26, r22
    2c3c:	b7 07       	cpc	r27, r23
    2c3e:	10 f0       	brcs	.+4      	; 0x2c44 <__udivmodhi4_ep>
    2c40:	a6 1b       	sub	r26, r22
    2c42:	b7 0b       	sbc	r27, r23

00002c44 <__udivmodhi4_ep>:
    2c44:	88 1f       	adc	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	5a 95       	dec	r21
    2c4a:	a9 f7       	brne	.-22     	; 0x2c36 <__udivmodhi4_loop>
    2c4c:	80 95       	com	r24
    2c4e:	90 95       	com	r25
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	08 95       	ret

00002c56 <_exit>:
    2c56:	f8 94       	cli

00002c58 <__stop_program>:
    2c58:	ff cf       	rjmp	.-2      	; 0x2c58 <__stop_program>
