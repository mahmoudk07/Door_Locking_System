
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000020d2  00002166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800076  00800076  0000217c  2**0
                  ALLOC
  3 .stab         00002aa8  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016bb  00000000  00000000  00004c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000062df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000641f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000658f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000090c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a25d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 0c 	call	0x18ca	; 0x18ca <main>
      8a:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
* [Arguments]: Pointer to structure of type UART_ConfigType To Specify Configuration
*              of UART Driver
* [Returns]: No Return Types
*******************************************************************************/
void UART_init(const UART_ConfigType* Config_ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	/* Set Bits number 3 in The Data size number in The bit UCSZ2 in Register UCSRB */
	UCSRB = (UCSRB & 0xFB) | (Config_ptr->Data_size & 0x04);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	98 2f       	mov	r25, r24
     b76:	9b 7f       	andi	r25, 0xFB	; 251
     b78:	eb 81       	ldd	r30, Y+3	; 0x03
     b7a:	fc 81       	ldd	r31, Y+4	; 0x04
     b7c:	80 81       	ld	r24, Z
     b7e:	84 70       	andi	r24, 0x04	; 4
     b80:	89 2b       	or	r24, r25
     b82:	8c 93       	st	X, r24

	/* To Write in Register UCSRC, Firstly we need to make URSEL with LOGIC HIGH */
	/* But the first 2 bits in Data size in the bits UCSZ1 and UCSZ0 to Specify the size of Data */
	UCSRC = (1 << URSEL) | (Config_ptr->Data_size << 1);
     b84:	a0 e4       	ldi	r26, 0x40	; 64
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	80 81       	ld	r24, Z
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	80 68       	ori	r24, 0x80	; 128
     b98:	8c 93       	st	X, r24

	/* Specify Parity bit Mode(Even/ Odd / Disabled) in Data frame */
	UCSRC = (UCSRC & 0xCF) | (Config_ptr->Parity_bit << 4);
     b9a:	a0 e4       	ldi	r26, 0x40	; 64
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e0 e4       	ldi	r30, 0x40	; 64
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	28 2f       	mov	r18, r24
     ba6:	2f 7c       	andi	r18, 0xCF	; 207
     ba8:	eb 81       	ldd	r30, Y+3	; 0x03
     baa:	fc 81       	ldd	r31, Y+4	; 0x04
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	82 95       	swap	r24
     bb4:	92 95       	swap	r25
     bb6:	90 7f       	andi	r25, 0xF0	; 240
     bb8:	98 27       	eor	r25, r24
     bba:	80 7f       	andi	r24, 0xF0	; 240
     bbc:	98 27       	eor	r25, r24
     bbe:	82 2b       	or	r24, r18
     bc0:	8c 93       	st	X, r24

	/* Specify number of stop bits in the Data frame */
	UCSRC = (UCSRC & 0xF7) | (Config_ptr->Stop_bit << 3);
     bc2:	a0 e4       	ldi	r26, 0x40	; 64
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e0 e4       	ldi	r30, 0x40	; 64
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	28 2f       	mov	r18, r24
     bce:	27 7f       	andi	r18, 0xF7	; 247
     bd0:	eb 81       	ldd	r30, Y+3	; 0x03
     bd2:	fc 81       	ldd	r31, Y+4	; 0x04
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	82 2b       	or	r24, r18
     be8:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_ptr->baud_rate * 8UL))) - 1);
     bea:	eb 81       	ldd	r30, Y+3	; 0x03
     bec:	fc 81       	ldd	r31, Y+4	; 0x04
     bee:	83 81       	ldd	r24, Z+3	; 0x03
     bf0:	94 81       	ldd	r25, Z+4	; 0x04
     bf2:	a5 81       	ldd	r26, Z+5	; 0x05
     bf4:	b6 81       	ldd	r27, Z+6	; 0x06
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	aa 1f       	adc	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	aa 1f       	adc	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	aa 1f       	adc	r26, r26
     c0c:	bb 1f       	adc	r27, r27
     c0e:	9c 01       	movw	r18, r24
     c10:	ad 01       	movw	r20, r26
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	92 e1       	ldi	r25, 0x12	; 18
     c16:	aa e7       	ldi	r26, 0x7A	; 122
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	bc 01       	movw	r22, r24
     c1c:	cd 01       	movw	r24, r26
     c1e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__udivmodsi4>
     c22:	da 01       	movw	r26, r20
     c24:	c9 01       	movw	r24, r18
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     c2c:	e0 e4       	ldi	r30, 0x40	; 64
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	89 2f       	mov	r24, r25
     c36:	99 27       	eor	r25, r25
     c38:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c3a:	e9 e2       	ldi	r30, 0x29	; 41
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	80 83       	st	Z, r24
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <UART_sendByte>:
* [Description]: This Function Responsible for send byte to another UART Device
* [Arguments]: uint8 ---> Data that will be send
* [Returns]: No Return Types
*******************************************************************************/
void UART_sendByte(const uint8 data)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	89 83       	std	Y+1, r24	; 0x01
	/* Here This check if Transmitter Register is Empty or Not */
	/* If empty --> it can receive another byte and will exit from while loop and send data to UDR Register*/
	/* If not empty --> it will wait until Transmit Register to be empty to be able to send another byte without
	   Data overrun */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c5c:	eb e2       	ldi	r30, 0x2B	; 43
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	80 72       	andi	r24, 0x20	; 32
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	b9 f3       	breq	.-18     	; 0xc5c <UART_sendByte+0xc>

	/*Send The Required data to UART Register */
	UDR = data;
     c6e:	ec e2       	ldi	r30, 0x2C	; 44
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	80 83       	st	Z, r24
}
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <UART_recieveByte>:
* [Description]: This Function Responsible for receive byte to another UART Device
* [Arguments]: No Arguments
* [Returns]: No Return Types
*******************************************************************************/
uint8 UART_recieveByte(void)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	/* this while loop will stop when The reading of byte is completed ---> data already read */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c86:	eb e2       	ldi	r30, 0x2B	; 43
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 23       	and	r24, r24
     c8e:	dc f7       	brge	.-10     	; 0xc86 <UART_recieveByte+0x8>

	//---> This will clear RX Flag after reading the Register
    return UDR;
     c90:	ec e2       	ldi	r30, 0x2C	; 44
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <UART_sendString>:
* [Description]: This Function Responsible for send string to another UART Device
* [Arguments]: Pointer to First character in the string
* [Returns]: No Return Types
*******************************************************************************/
void UART_sendString(const uint8 *Str)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <UART_sendString+0x6>
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	0e c0       	rjmp	.+28     	; 0xccc <UART_sendString+0x30>

	/* Loop until reach to the end of the string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	fc 01       	movw	r30, r24
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	80 81       	ld	r24, Z
     cc2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
		i++;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Loop until reach to the end of the string */
	while(Str[i] != '\0')
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	88 23       	and	r24, r24
     ce0:	39 f7       	brne	.-50     	; 0xcb0 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <UART_receiveString>:
* [Description]: This Function Responsible for receive string to another UART Device
* [Arguments]: Pointer to First character in the string
* [Returns]: No Return Types
*******************************************************************************/
void UART_receiveString(uint8 *Str)
{
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <UART_receiveString+0xa>
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	9b 83       	std	Y+3, r25	; 0x03
     d00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     d02:	19 82       	std	Y+1, r1	; 0x01

	/* First Receive the First byte to check this byte is the end of string or not */
	Str[i] = UART_recieveByte();
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	8c 01       	movw	r16, r24
     d10:	02 0f       	add	r16, r18
     d12:	13 1f       	adc	r17, r19
     d14:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
     d18:	f8 01       	movw	r30, r16
     d1a:	80 83       	st	Z, r24
     d1c:	0f c0       	rjmp	.+30     	; 0xd3c <UART_receiveString+0x4e>

	/* Loop until string ends with the Special character that first user specified it */
	/* this character '#' is optional you can use any character instead of it*/
	while(Str[i] != '#')
	{
		i++;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	9b 81       	ldd	r25, Y+3	; 0x03
     d2e:	8c 01       	movw	r16, r24
     d30:	02 0f       	add	r16, r18
     d32:	13 1f       	adc	r17, r19
     d34:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
     d38:	f8 01       	movw	r30, r16
     d3a:	80 83       	st	Z, r24
	/* First Receive the First byte to check this byte is the end of string or not */
	Str[i] = UART_recieveByte();

	/* Loop until string ends with the Special character that first user specified it */
	/* this character '#' is optional you can use any character instead of it*/
	while(Str[i] != '#')
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	fc 01       	movw	r30, r24
     d48:	e2 0f       	add	r30, r18
     d4a:	f3 1f       	adc	r31, r19
     d4c:	80 81       	ld	r24, Z
     d4e:	83 32       	cpi	r24, 0x23	; 35
     d50:	31 f7       	brne	.-52     	; 0xd1e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* end the string received with null Terminator */
	Str[i] = '\0';
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	10 82       	st	Z, r1
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <TWI_init>:
*                 4- Enable TWI module
* [Argument] : No arguments
* [Returns] : No return data type
*******************************************************************************************************/
void TWI_init(const TWI_ConfigType* Config)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <TWI_init+0x6>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
	/* 400.000 KB/s using Pre-scaler 00 with F_CPU = 8Mhz */
	TWBR = Config->Factor;
     d82:	a0 e2       	ldi	r26, 0x20	; 32
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	8c 93       	st	X, r24
	/* Set Pre-scaler with 0x00 to get bit rate 400.000 KB/s */
	TWSR = Config->Prescaler;
     d8e:	a1 e2       	ldi	r26, 0x21	; 33
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	80 81       	ld	r24, Z
     d98:	8c 93       	st	X, r24
	/* my address if device converted into slave under any Circumstance to be able to interact with new master*/
	TWAR = Config->slaveAddress << 1;
     d9a:	a2 e2       	ldi	r26, 0x22	; 34
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	81 81       	ldd	r24, Z+1	; 0x01
     da4:	88 0f       	add	r24, r24
     da6:	8c 93       	st	X, r24
	/* Enable I2C Module */
	TWCR = (1 << TWEN);
     da8:	e6 e5       	ldi	r30, 0x56	; 86
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	80 83       	st	Z, r24
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <TWI_start>:
*                 3- Enable TWI Module
* [Argument] : No arguments
* [Returns] : No return data type
*******************************************************************************************************/
void TWI_start(void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	/*********************************
	 * TWINT : Clear interrupt Flag
	 * TWSTA : Send a Start bit
	 * TWEN  : Enable TWI Module
	 ********************************/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     dc2:	e6 e5       	ldi	r30, 0x56	; 86
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	84 ea       	ldi	r24, 0xA4	; 164
     dc8:	80 83       	st	Z, r24

	/* wait until start bit is send then terminate the function */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     dca:	e6 e5       	ldi	r30, 0x56	; 86
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	88 23       	and	r24, r24
     dd2:	dc f7       	brge	.-10     	; 0xdca <TWI_start+0x10>
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <TWI_stop>:
*                 3- Enable TWI Module
* [Argument] : No arguments
* [Returns] : No return data type
*******************************************************************************************************/
void TWI_stop(void)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	/*********************************
	 * TWINT : Clear interrupt Flag
	 * TWSTO : Send a Stop bit
	 * TWEN  : Enable TWI Module
	 ********************************/
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     de2:	e6 e5       	ldi	r30, 0x56	; 86
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	84 e9       	ldi	r24, 0x94	; 148
     de8:	80 83       	st	Z, r24
	/* No need to wait until stop bit is send because i will leave the bus anyway */
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TWI_writebyte>:
*                 3- wait until data send successfully
* [Argument] : uint8 ----> 8-bit Data
* [Returns] : No return data type
*******************************************************************************************************/
void TWI_writebyte(uint8 data)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
	/* Put the data on TWI Register */
	TWDR = data;
     dfc:	e3 e2       	ldi	r30, 0x23	; 35
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	80 83       	st	Z, r24
	/********************************
		 * TWINT : Clear interrupt Flag
		 * TWEN  : Enable TWI Module
    ********************************/
	TWCR = (1 << TWINT) | (1 << TWEN);
     e04:	e6 e5       	ldi	r30, 0x56	; 86
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	84 e8       	ldi	r24, 0x84	; 132
     e0a:	80 83       	st	Z, r24
	/* wait until the data is send successfully */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	88 23       	and	r24, r24
     e14:	dc f7       	brge	.-10     	; 0xe0c <TWI_writebyte+0x1c>
}
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <TWI_readByteWithACK>:
*                 2- wait until data received successfully
* [Argument] :No Arguments
* [Returns] : Return Data Received
*******************************************************************************************************/
uint8 TWI_readByteWithACK(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	/*********************************
		 * TWINT : Clear interrupt Flag
		 * TWSTO : Send a signal acknowledge to sender to make it know data is received successfully
		 * TWEN  : Enable TWI Module
	********************************/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e26:	e6 e5       	ldi	r30, 0x56	; 86
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	84 ec       	ldi	r24, 0xC4	; 196
     e2c:	80 83       	st	Z, r24
	/* Wait until Data received successfully */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     e2e:	e6 e5       	ldi	r30, 0x56	; 86
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 23       	and	r24, r24
     e36:	dc f7       	brge	.-10     	; 0xe2e <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
     e38:	e3 e2       	ldi	r30, 0x23	; 35
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <TWI_readByteWithNACK>:
*                 3- wait until data received successfully
* [Argument] :No Arguments
* [Returns] : Return Data Received
*******************************************************************************************************/
uint8 TWI_readByteWithNACK(void)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	/*********************************
		 * TWINT : Clear interrupt Flag
		 * TWEN  : Enable TWI Module
	********************************/
	TWCR = (1 << TWINT) | (1 << TWEN);
     e4c:	e6 e5       	ldi	r30, 0x56	; 86
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	84 e8       	ldi	r24, 0x84	; 132
     e52:	80 83       	st	Z, r24
	/* Wait until Data received successfully */
	while(BIT_IS_CLEAR(TWCR,TWINT));
     e54:	e6 e5       	ldi	r30, 0x56	; 86
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 23       	and	r24, r24
     e5c:	dc f7       	brge	.-10     	; 0xe54 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
     e5e:	e3 e2       	ldi	r30, 0x23	; 35
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <TWI_getStatus>:
*                 -Get the status of the action done by sender to check which action the flag was enabled by which?
* [Argument] :No Arguments
* [Returns] : Return Status Data
*******************************************************************************************************/
uint8 TWI_getStatus(void)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
     e74:	e1 e2       	ldi	r30, 0x21	; 33
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 7f       	andi	r24, 0xF8	; 248
     e7c:	89 83       	std	Y+1, r24	; 0x01
	return status;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <__vector_7>:
static volatile void(*callBack_ptr)(void) = NULL;

/********************************************************************************
 *                       Interrupt Service Routines                             *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect){
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	if(callBack_ptr != NULL){
     eb2:	80 91 76 00 	lds	r24, 0x0076
     eb6:	90 91 77 00 	lds	r25, 0x0077
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	29 f0       	breq	.+10     	; 0xec8 <__vector_7+0x40>
		(*callBack_ptr)();
     ebe:	e0 91 76 00 	lds	r30, 0x0076
     ec2:	f0 91 77 00 	lds	r31, 0x0077
     ec6:	09 95       	icall
	}
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <TIMER1_init_Compare>:
* [Arguments]: Pointer to struct of type Timer1_ConfigType to set configuration that
*              Timer1 will operate on it
* [Returns]: No Return type
********************************************************************************/
void TIMER1_init_Compare(Timer1_ConfigType* Config_ptr)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <TIMER1_init_Compare+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize Timer1 With value that will start count according to this value*/
	TCNT1 = Config_ptr->Initial_value;
     efc:	ac e4       	ldi	r26, 0x4C	; 76
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e9 81       	ldd	r30, Y+1	; 0x01
     f02:	fa 81       	ldd	r31, Y+2	; 0x02
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	11 96       	adiw	r26, 0x01	; 1
     f0a:	9c 93       	st	X, r25
     f0c:	8e 93       	st	-X, r24

	/* Set Compare value that Timer will reach to it then, it backs count from 0*/
	OCR1A = Config_ptr->Compare_value;
     f0e:	aa e4       	ldi	r26, 0x4A	; 74
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 81       	ldd	r30, Y+1	; 0x01
     f14:	fa 81       	ldd	r31, Y+2	; 0x02
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	11 96       	adiw	r26, 0x01	; 1
     f1c:	9c 93       	st	X, r25
     f1e:	8e 93       	st	-X, r24

	/* Enable Timer1 Interrupt*/
	TIMSK |= (1 << OCIE1A);
     f20:	a9 e5       	ldi	r26, 0x59	; 89
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e9 e5       	ldi	r30, 0x59	; 89
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	8c 93       	st	X, r24

	/****************************************************************************
	 * FOC1A : It will be set when Timer1 Operate in non PWM Mode
	 * Set First 2-bits From Mode Member to Specify which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_ptr->Mode & 0x03));
     f2e:	af e4       	ldi	r26, 0x4F	; 79
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ef e4       	ldi	r30, 0x4F	; 79
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	98 2f       	mov	r25, r24
     f3a:	9c 7f       	andi	r25, 0xFC	; 252
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	85 81       	ldd	r24, Z+5	; 0x05
     f42:	83 70       	andi	r24, 0x03	; 3
     f44:	89 2b       	or	r24, r25
     f46:	88 60       	ori	r24, 0x08	; 8
     f48:	8c 93       	st	X, r24

	/****************************************************************************
	 * Set Pre-scaler value in the first 3-bits in TCCR1B Register that will specify which frequency Timer1 will Operate
	 * Set Last 2-bits From Mode Member to Specify Which Mode Timer1 Will Operate
	****************************************************************************/
	TCCR1B = ((TCCR1B & 0xF8) | (Config_ptr->Prescaler & 0x07)) | ((TCCR1B & 0xE7) | ((Config_ptr->Mode & 0x0C)<<1));
     f4a:	ae e4       	ldi	r26, 0x4E	; 78
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ee e4       	ldi	r30, 0x4E	; 78
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	98 2f       	mov	r25, r24
     f56:	98 7f       	andi	r25, 0xF8	; 248
     f58:	e9 81       	ldd	r30, Y+1	; 0x01
     f5a:	fa 81       	ldd	r31, Y+2	; 0x02
     f5c:	84 81       	ldd	r24, Z+4	; 0x04
     f5e:	87 70       	andi	r24, 0x07	; 7
     f60:	39 2f       	mov	r19, r25
     f62:	38 2b       	or	r19, r24
     f64:	ee e4       	ldi	r30, 0x4E	; 78
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	28 2f       	mov	r18, r24
     f6c:	27 7e       	andi	r18, 0xE7	; 231
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	85 81       	ldd	r24, Z+5	; 0x05
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	8c 70       	andi	r24, 0x0C	; 12
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	82 2b       	or	r24, r18
     f82:	83 2b       	or	r24, r19
     f84:	8c 93       	st	X, r24
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <TIMER1_deInit>:
* [Description]: Function disable and stop Timer1 driver
* [Arguments]: No arguments
* [Returns]: No Returns
********************************************************************************/
void TIMER1_deInit(void)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	/* Clear Timer Register */
	TCCR1A = 0;
     f98:	ef e4       	ldi	r30, 0x4F	; 79
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	10 82       	st	Z, r1
	TCCR1B = 0;
     f9e:	ee e4       	ldi	r30, 0x4E	; 78
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	10 82       	st	Z, r1
	TCNT1 = 0;
     fa4:	ec e4       	ldi	r30, 0x4C	; 76
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	11 82       	std	Z+1, r1	; 0x01
     faa:	10 82       	st	Z, r1
	/* Disable Interrupt */
	TIMSK &= ~(1 << OCIE1A);
     fac:	a9 e5       	ldi	r26, 0x59	; 89
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e9 e5       	ldi	r30, 0x59	; 89
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7e       	andi	r24, 0xEF	; 239
     fb8:	8c 93       	st	X, r24
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <TIMER1_setCallback>:
* [Arguments]: Pointer that will point to passed Function that will be executed when
*              The interrupt(detection) occurs
* [Returns]: No Return type
********************************************************************************/
void TIMER1_setCallback(void(*a_ptr)(void))
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <TIMER1_setCallback+0x6>
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
	/* Make global variable points to same function to be called in ISR when an detection occur*/
	callBack_ptr = a_ptr;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	90 93 77 00 	sts	0x0077, r25
     fd6:	80 93 76 00 	sts	0x0076, r24
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <GPIO_setupPinDirection>:
/*
* Description:
* set Direction of any Pin in Passed Port_num (input or output)
* if Port_num or Pin_num are invalid, function will not handle the request
*/
void GPIO_setupPinDirection(uint8 Port_num , uint8 Pin_num , GPIO_PinDirectionType direction){
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <GPIO_setupPinDirection+0x6>
     fea:	00 d0       	rcall	.+0      	; 0xfec <GPIO_setupPinDirection+0x8>
     fec:	0f 92       	push	r0
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	6a 83       	std	Y+2, r22	; 0x02
     ff6:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_num >= NUM_OF_PORTS || Pin_num >= NUM_OF_PINS_PER_PORT)
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <GPIO_setupPinDirection+0x1c>
     ffe:	d5 c0       	rjmp	.+426    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	88 30       	cpi	r24, 0x08	; 8
    1004:	08 f0       	brcs	.+2      	; 0x1008 <GPIO_setupPinDirection+0x24>
    1006:	d1 c0       	rjmp	.+418    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(Port_num){
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 83       	std	Y+5, r19	; 0x05
    1010:	2c 83       	std	Y+4, r18	; 0x04
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <GPIO_setupPinDirection+0x3a>
    101c:	43 c0       	rjmp	.+134    	; 0x10a4 <GPIO_setupPinDirection+0xc0>
    101e:	2c 81       	ldd	r18, Y+4	; 0x04
    1020:	3d 81       	ldd	r19, Y+5	; 0x05
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <GPIO_setupPinDirection+0x4e>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	71 f0       	breq	.+28     	; 0x104c <GPIO_setupPinDirection+0x68>
    1030:	bc c0       	rjmp	.+376    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
    1032:	2c 81       	ldd	r18, Y+4	; 0x04
    1034:	3d 81       	ldd	r19, Y+5	; 0x05
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <GPIO_setupPinDirection+0x5a>
    103c:	5f c0       	rjmp	.+190    	; 0x10fc <GPIO_setupPinDirection+0x118>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <GPIO_setupPinDirection+0x66>
    1048:	85 c0       	rjmp	.+266    	; 0x1154 <GPIO_setupPinDirection+0x170>
    104a:	af c0       	rjmp	.+350    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(direction == PIN_INPUT){
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 23       	and	r24, r24
    1050:	a9 f4       	brne	.+42     	; 0x107c <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA,Pin_num);
    1052:	aa e3       	ldi	r26, 0x3A	; 58
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ea e3       	ldi	r30, 0x3A	; 58
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_setupPinDirection+0x8c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_setupPinDirection+0x88>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	97 c0       	rjmp	.+302    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,Pin_num);
    107c:	aa e3       	ldi	r26, 0x3A	; 58
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ea e3       	ldi	r30, 0x3A	; 58
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_setupPinDirection+0xb6>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_setupPinDirection+0xb2>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	83 c0       	rjmp	.+262    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_INPUT){
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	a9 f4       	brne	.+42     	; 0x10d4 <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB,Pin_num);
    10aa:	a7 e3       	ldi	r26, 0x37	; 55
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e7 e3       	ldi	r30, 0x37	; 55
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_setupPinDirection+0xe4>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_setupPinDirection+0xe0>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	6b c0       	rjmp	.+214    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,Pin_num);
    10d4:	a7 e3       	ldi	r26, 0x37	; 55
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e7 e3       	ldi	r30, 0x37	; 55
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_setupPinDirection+0x10e>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_setupPinDirection+0x10a>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	57 c0       	rjmp	.+174    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_INPUT){
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 23       	and	r24, r24
    1100:	a9 f4       	brne	.+42     	; 0x112c <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC,Pin_num);
    1102:	a4 e3       	ldi	r26, 0x34	; 52
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e4 e3       	ldi	r30, 0x34	; 52
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <GPIO_setupPinDirection+0x13c>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <GPIO_setupPinDirection+0x138>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,Pin_num);
    112c:	a4 e3       	ldi	r26, 0x34	; 52
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <GPIO_setupPinDirection+0x166>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <GPIO_setupPinDirection+0x162>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	2b c0       	rjmp	.+86     	; 0x11aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_INPUT){
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 23       	and	r24, r24
    1158:	a9 f4       	brne	.+42     	; 0x1184 <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD,Pin_num);
    115a:	a1 e3       	ldi	r26, 0x31	; 49
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e1 e3       	ldi	r30, 0x31	; 49
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <GPIO_setupPinDirection+0x194>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <GPIO_setupPinDirection+0x190>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	13 c0       	rjmp	.+38     	; 0x11aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,Pin_num);
    1184:	a1 e3       	ldi	r26, 0x31	; 49
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_setupPinDirection+0x1be>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_setupPinDirection+0x1ba>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <GPIO_writePin>:
* Description:
* write Logic High or Low in a Specific Pin in PORT Passed to Function
* if Port_num or Pin_num are invalid, function will not handle the request
* if This Pin are defined as Input Pin, It will be activate or deactivate of Internal Pull-up Resistor
*/
void GPIO_writePin(uint8 Port_num , uint8 Pin_num , uint8 value){
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <GPIO_writePin+0x6>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <GPIO_writePin+0x8>
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	6a 83       	std	Y+2, r22	; 0x02
    11cc:	4b 83       	std	Y+3, r20	; 0x03
	if(Port_num >= NUM_OF_PORTS || Pin_num >= NUM_OF_PINS_PER_PORT)
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <GPIO_writePin+0x1c>
    11d4:	d5 c0       	rjmp	.+426    	; 0x1380 <GPIO_writePin+0x1c6>
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	08 f0       	brcs	.+2      	; 0x11de <GPIO_writePin+0x24>
    11dc:	d1 c0       	rjmp	.+418    	; 0x1380 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(Port_num){
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3d 83       	std	Y+5, r19	; 0x05
    11e6:	2c 83       	std	Y+4, r18	; 0x04
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <GPIO_writePin+0x3a>
    11f2:	43 c0       	rjmp	.+134    	; 0x127a <GPIO_writePin+0xc0>
    11f4:	2c 81       	ldd	r18, Y+4	; 0x04
    11f6:	3d 81       	ldd	r19, Y+5	; 0x05
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	2c f4       	brge	.+10     	; 0x1208 <GPIO_writePin+0x4e>
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	71 f0       	breq	.+28     	; 0x1222 <GPIO_writePin+0x68>
    1206:	bc c0       	rjmp	.+376    	; 0x1380 <GPIO_writePin+0x1c6>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <GPIO_writePin+0x5a>
    1212:	5f c0       	rjmp	.+190    	; 0x12d2 <GPIO_writePin+0x118>
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <GPIO_writePin+0x66>
    121e:	85 c0       	rjmp	.+266    	; 0x132a <GPIO_writePin+0x170>
    1220:	af c0       	rjmp	.+350    	; 0x1380 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_High)
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	a1 f4       	brne	.+40     	; 0x1250 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,Pin_num);
    1228:	ab e3       	ldi	r26, 0x3B	; 59
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <GPIO_writePin+0x8c>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <GPIO_writePin+0x88>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	98 c0       	rjmp	.+304    	; 0x1380 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,Pin_num);
    1250:	ab e3       	ldi	r26, 0x3B	; 59
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <GPIO_writePin+0xb4>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <GPIO_writePin+0xb0>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	83 c0       	rjmp	.+262    	; 0x1380 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_High){
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <GPIO_writePin+0xee>
				SET_BIT(PORTB,Pin_num);
    1280:	a8 e3       	ldi	r26, 0x38	; 56
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e8 e3       	ldi	r30, 0x38	; 56
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_writePin+0xe4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_writePin+0xe0>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	6c c0       	rjmp	.+216    	; 0x1380 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTB,Pin_num);
    12a8:	a8 e3       	ldi	r26, 0x38	; 56
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_writePin+0x10c>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_writePin+0x108>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	57 c0       	rjmp	.+174    	; 0x1380 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_High)
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	a1 f4       	brne	.+40     	; 0x1300 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,Pin_num);
    12d8:	a5 e3       	ldi	r26, 0x35	; 53
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e3       	ldi	r30, 0x35	; 53
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <GPIO_writePin+0x13c>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <GPIO_writePin+0x138>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	40 c0       	rjmp	.+128    	; 0x1380 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,Pin_num);
    1300:	a5 e3       	ldi	r26, 0x35	; 53
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_writePin+0x164>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_writePin+0x160>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	2b c0       	rjmp	.+86     	; 0x1380 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_High)
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	a1 f4       	brne	.+40     	; 0x1358 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,Pin_num);
    1330:	a2 e3       	ldi	r26, 0x32	; 50
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e2 e3       	ldi	r30, 0x32	; 50
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <GPIO_writePin+0x194>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <GPIO_writePin+0x190>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,Pin_num);
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <GPIO_writePin+0x1bc>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <GPIO_writePin+0x1b8>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <GPIO_ReadPin>:
/*
* Description:
* Read value of Certain Pin in Port passed to Function (Logic High or LOW)
* if Port_num or Pin_num are invalid, function will return LOW
*/
uint8 GPIO_ReadPin(uint8 Port_num , uint8 Pin_num){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <GPIO_ReadPin+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <GPIO_ReadPin+0x8>
    1398:	00 d0       	rcall	.+0      	; 0x139a <GPIO_ReadPin+0xa>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_num >= NUM_OF_PORTS || Pin_num >= NUM_OF_PINS_PER_PORT){
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	18 f4       	brcc	.+6      	; 0x13ae <GPIO_ReadPin+0x1e>
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	88 30       	cpi	r24, 0x08	; 8
    13ac:	10 f0       	brcs	.+4      	; 0x13b2 <GPIO_ReadPin+0x22>
		/* Return Logic LOW */
		return LOGIC_Low;
    13ae:	1d 82       	std	Y+5, r1	; 0x05
    13b0:	82 c0       	rjmp	.+260    	; 0x14b6 <GPIO_ReadPin+0x126>
	}
	else
	{
		switch(Port_num){
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3c 83       	std	Y+4, r19	; 0x04
    13ba:	2b 83       	std	Y+3, r18	; 0x03
    13bc:	4b 81       	ldd	r20, Y+3	; 0x03
    13be:	5c 81       	ldd	r21, Y+4	; 0x04
    13c0:	41 30       	cpi	r20, 0x01	; 1
    13c2:	51 05       	cpc	r21, r1
    13c4:	79 f1       	breq	.+94     	; 0x1424 <GPIO_ReadPin+0x94>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	91 05       	cpc	r25, r1
    13ce:	34 f4       	brge	.+12     	; 0x13dc <GPIO_ReadPin+0x4c>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	21 15       	cp	r18, r1
    13d6:	31 05       	cpc	r19, r1
    13d8:	69 f0       	breq	.+26     	; 0x13f4 <GPIO_ReadPin+0x64>
    13da:	6c c0       	rjmp	.+216    	; 0x14b4 <GPIO_ReadPin+0x124>
    13dc:	4b 81       	ldd	r20, Y+3	; 0x03
    13de:	5c 81       	ldd	r21, Y+4	; 0x04
    13e0:	42 30       	cpi	r20, 0x02	; 2
    13e2:	51 05       	cpc	r21, r1
    13e4:	b9 f1       	breq	.+110    	; 0x1454 <GPIO_ReadPin+0xc4>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <GPIO_ReadPin+0x62>
    13f0:	49 c0       	rjmp	.+146    	; 0x1484 <GPIO_ReadPin+0xf4>
    13f2:	60 c0       	rjmp	.+192    	; 0x14b4 <GPIO_ReadPin+0x124>
		case PORTA_ID:
			if(BIT_IS_SET(PINA,Pin_num)){
    13f4:	e9 e3       	ldi	r30, 0x39	; 57
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <GPIO_ReadPin+0x7c>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <GPIO_ReadPin+0x78>
    1410:	ca 01       	movw	r24, r20
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	90 70       	andi	r25, 0x00	; 0
    1416:	88 23       	and	r24, r24
    1418:	19 f0       	breq	.+6      	; 0x1420 <GPIO_ReadPin+0x90>
				return LOGIC_High;
    141a:	51 e0       	ldi	r21, 0x01	; 1
    141c:	5d 83       	std	Y+5, r21	; 0x05
    141e:	4b c0       	rjmp	.+150    	; 0x14b6 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    1420:	1d 82       	std	Y+5, r1	; 0x05
    1422:	49 c0       	rjmp	.+146    	; 0x14b6 <GPIO_ReadPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,Pin_num)){
    1424:	e6 e3       	ldi	r30, 0x36	; 54
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_ReadPin+0xac>
    1438:	55 95       	asr	r21
    143a:	47 95       	ror	r20
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_ReadPin+0xa8>
    1440:	ca 01       	movw	r24, r20
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	88 23       	and	r24, r24
    1448:	19 f0       	breq	.+6      	; 0x1450 <GPIO_ReadPin+0xc0>
				return LOGIC_High;
    144a:	51 e0       	ldi	r21, 0x01	; 1
    144c:	5d 83       	std	Y+5, r21	; 0x05
    144e:	33 c0       	rjmp	.+102    	; 0x14b6 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    1450:	1d 82       	std	Y+5, r1	; 0x05
    1452:	31 c0       	rjmp	.+98     	; 0x14b6 <GPIO_ReadPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,Pin_num)){
    1454:	e3 e3       	ldi	r30, 0x33	; 51
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_ReadPin+0xdc>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_ReadPin+0xd8>
    1470:	ca 01       	movw	r24, r20
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	90 70       	andi	r25, 0x00	; 0
    1476:	88 23       	and	r24, r24
    1478:	19 f0       	breq	.+6      	; 0x1480 <GPIO_ReadPin+0xf0>
				return LOGIC_High;
    147a:	51 e0       	ldi	r21, 0x01	; 1
    147c:	5d 83       	std	Y+5, r21	; 0x05
    147e:	1b c0       	rjmp	.+54     	; 0x14b6 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    1480:	1d 82       	std	Y+5, r1	; 0x05
    1482:	19 c0       	rjmp	.+50     	; 0x14b6 <GPIO_ReadPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,Pin_num)){
    1484:	e0 e3       	ldi	r30, 0x30	; 48
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a9 01       	movw	r20, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_ReadPin+0x10c>
    1498:	55 95       	asr	r21
    149a:	47 95       	ror	r20
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_ReadPin+0x108>
    14a0:	ca 01       	movw	r24, r20
    14a2:	81 70       	andi	r24, 0x01	; 1
    14a4:	90 70       	andi	r25, 0x00	; 0
    14a6:	88 23       	and	r24, r24
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <GPIO_ReadPin+0x120>
				return LOGIC_High;
    14aa:	51 e0       	ldi	r21, 0x01	; 1
    14ac:	5d 83       	std	Y+5, r21	; 0x05
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <GPIO_ReadPin+0x126>
			}
			else{
				return LOGIC_Low;
    14b0:	1d 82       	std	Y+5, r1	; 0x05
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <GPIO_ReadPin+0x126>
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_ReadPin+0x12a>
			}
			break;
		}
	}
}
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	8e 83       	std	Y+6, r24	; 0x06
    14ba:	8e 81       	ldd	r24, Y+6	; 0x06
    14bc:	26 96       	adiw	r28, 0x06	; 6
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <GPIO_setupPortDirection>:
* set Direction of any PORT Passed to Function (input or output)
* if direction value is PORT_INPUT --> All Pins will be Input Pins
* if direction value is PORT_OUTPUT --> All Pins will be output Pins
* if Port_num is invalid, function will not handle the request
*/
void GPIO_setupPortDirection(uint8 Port_num , GPIO_PortDirectionType direction){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <GPIO_setupPortDirection+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <GPIO_setupPortDirection+0x8>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_num >= NUM_OF_PORTS){
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	90 f5       	brcc	.+100    	; 0x1548 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else{
		switch(Port_num){
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	3c 83       	std	Y+4, r19	; 0x04
    14ec:	2b 83       	std	Y+3, r18	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	d1 f0       	breq	.+52     	; 0x152c <GPIO_setupPortDirection+0x5e>
    14f8:	2b 81       	ldd	r18, Y+3	; 0x03
    14fa:	3c 81       	ldd	r19, Y+4	; 0x04
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	2c f4       	brge	.+10     	; 0x150c <GPIO_setupPortDirection+0x3e>
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	61 f0       	breq	.+24     	; 0x1522 <GPIO_setupPortDirection+0x54>
    150a:	1e c0       	rjmp	.+60     	; 0x1548 <GPIO_setupPortDirection+0x7a>
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	81 f0       	breq	.+32     	; 0x1536 <GPIO_setupPortDirection+0x68>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	91 05       	cpc	r25, r1
    151e:	81 f0       	breq	.+32     	; 0x1540 <GPIO_setupPortDirection+0x72>
    1520:	13 c0       	rjmp	.+38     	; 0x1548 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1522:	ea e3       	ldi	r30, 0x3A	; 58
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	80 83       	st	Z, r24
    152a:	0e c0       	rjmp	.+28     	; 0x1548 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	80 83       	st	Z, r24
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1536:	e4 e3       	ldi	r30, 0x34	; 52
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	80 83       	st	Z, r24
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1540:	e1 e3       	ldi	r30, 0x31	; 49
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 83       	st	Z, r24
			break;
		}
	}
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <GPIO_writePort>:
* write Logic High or Low in a Specific PORT Passed to Function
* if Port_num is invalid, function will not handle the request
* if value of PORT is LOGIC HIGH or LOW and Pin is output ---> value will be written
* if value of PORT is LOGIC HIGH or LOW and PIN is input ---> activate or deactivate Pull-up Resistor
*/
void GPIO_writePort(uint8 Port_num , uint8 value){
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <GPIO_writePort+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <GPIO_writePort+0x8>
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_num >= NUM_OF_PORTS){
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	90 f5       	brcc	.+100    	; 0x15d0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else{
		switch(Port_num){
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 83       	std	Y+4, r19	; 0x04
    1574:	2b 83       	std	Y+3, r18	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	d1 f0       	breq	.+52     	; 0x15b4 <GPIO_writePort+0x5e>
    1580:	2b 81       	ldd	r18, Y+3	; 0x03
    1582:	3c 81       	ldd	r19, Y+4	; 0x04
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <GPIO_writePort+0x3e>
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	61 f0       	breq	.+24     	; 0x15aa <GPIO_writePort+0x54>
    1592:	1e c0       	rjmp	.+60     	; 0x15d0 <GPIO_writePort+0x7a>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	81 f0       	breq	.+32     	; 0x15be <GPIO_writePort+0x68>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <GPIO_writePort+0x72>
    15a8:	13 c0       	rjmp	.+38     	; 0x15d0 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	80 83       	st	Z, r24
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15b4:	e8 e3       	ldi	r30, 0x38	; 56
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	80 83       	st	Z, r24
    15bc:	09 c0       	rjmp	.+18     	; 0x15d0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15be:	e5 e3       	ldi	r30, 0x35	; 53
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15c8:	e2 e3       	ldi	r30, 0x32	; 50
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GPIO_readPort>:
/*
* Description:
* Read value of Certain Port passed to Function (Logic High or LOW)
* if Port_num is invalid, function will return LOW
*/
uint8 GPIO_readPort(uint8 Port_num){
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <GPIO_readPort+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_readPort+0x8>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_Low ;
    15ec:	19 82       	std	Y+1, r1	; 0x01
	if(Port_num >= NUM_OF_PORTS){
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	90 f5       	brcc	.+100    	; 0x1658 <GPIO_readPort+0x7a>
		/* Return Logic LOW */
	}
	else{
		switch(Port_num){
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	3c 83       	std	Y+4, r19	; 0x04
    15fc:	2b 83       	std	Y+3, r18	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	91 05       	cpc	r25, r1
    1606:	d1 f0       	breq	.+52     	; 0x163c <GPIO_readPort+0x5e>
    1608:	2b 81       	ldd	r18, Y+3	; 0x03
    160a:	3c 81       	ldd	r19, Y+4	; 0x04
    160c:	22 30       	cpi	r18, 0x02	; 2
    160e:	31 05       	cpc	r19, r1
    1610:	2c f4       	brge	.+10     	; 0x161c <GPIO_readPort+0x3e>
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	61 f0       	breq	.+24     	; 0x1632 <GPIO_readPort+0x54>
    161a:	1e c0       	rjmp	.+60     	; 0x1658 <GPIO_readPort+0x7a>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	81 f0       	breq	.+32     	; 0x1646 <GPIO_readPort+0x68>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <GPIO_readPort+0x72>
    1630:	13 c0       	rjmp	.+38     	; 0x1658 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    1632:	e9 e3       	ldi	r30, 0x39	; 57
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    163c:	e6 e3       	ldi	r30, 0x36	; 54
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1646:	e3 e3       	ldi	r30, 0x33	; 51
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1650:	e0 e3       	ldi	r30, 0x30	; 48
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1658:	89 81       	ldd	r24, Y+1	; 0x01
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <PWM_Timer0_Start>:
*                4- Setup the direction for OC0 as output pin through the GPIO driver.
*                5- The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
* [Arguments]: duty cycle passed by DCMotor Driver
* [Returns]: No Return Type
****************************************************/
void PWM_Timer0_Start(uint8 duty_cycle){
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	0f 92       	push	r0
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Initialize timer with 0 //
    1674:	e2 e5       	ldi	r30, 0x52	; 82
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	10 82       	st	Z, r1

	OCR0 = (duty_cycle * 255) / 100; // set Compare value
    167a:	ec e5       	ldi	r30, 0x5C	; 92
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	48 2f       	mov	r20, r24
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	ca 01       	movw	r24, r20
    1686:	9c 01       	movw	r18, r24
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	c9 01       	movw	r24, r18
    168e:	96 95       	lsr	r25
    1690:	98 2f       	mov	r25, r24
    1692:	88 27       	eor	r24, r24
    1694:	97 95       	ror	r25
    1696:	87 95       	ror	r24
    1698:	82 1b       	sub	r24, r18
    169a:	93 0b       	sbc	r25, r19
    169c:	84 0f       	add	r24, r20
    169e:	95 1f       	adc	r25, r21
    16a0:	24 e6       	ldi	r18, 0x64	; 100
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodhi4>
    16aa:	cb 01       	movw	r24, r22
    16ac:	80 83       	st	Z, r24

	SET_BIT(DDRB,PB3); // PB3 as output PIN //
    16ae:	a7 e3       	ldi	r26, 0x37	; 55
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e7 e3       	ldi	r30, 0x37	; 55
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	88 60       	ori	r24, 0x08	; 8
    16ba:	8c 93       	st	X, r24
	/*
	*1- WGM01/WGM00 ----> For Fast PWM Mode of Timer0
	*2- COM01 -----> For non-inverted Mode
	*3- CS01 -----> For clock selector (FCPU / 8)
	*/
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a e6       	ldi	r24, 0x6A	; 106
    16c2:	80 83       	st	Z, r24
}
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <EEPROM_writeByte>:
#include "../../MCAL/twi/twi.h"
/*******************************************************************************
*                      Functions Definitions                                   *
*******************************************************************************/
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <EEPROM_writeByte+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <EEPROM_writeByte+0x8>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	6b 83       	std	Y+3, r22	; 0x03
	/* TWI send a start bit */
	TWI_start();
    16de:	0e 94 dd 06 	call	0xdba	; 0xdba <TWI_start>

	/* Check the action that make the flag is enabled is Sending a start bit*/
	if(TWI_getStatus() != TWI_START)
    16e2:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	11 f0       	breq	.+4      	; 0x16ee <EEPROM_writeByte+0x22>
		return ERROR;
    16ea:	1c 82       	std	Y+4, r1	; 0x04
    16ec:	28 c0       	rjmp	.+80     	; 0x173e <EEPROM_writeByte+0x72>

	/* Sending the address device of EEPROM 1010 is Fixed and first three bit is last three bits in 11-bit
	 * of the location that want to write a value on it in the EEPROM
	 * and specify R/W, In this case Write */
	TWI_writebyte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	80 70       	andi	r24, 0x00	; 0
    16f4:	97 70       	andi	r25, 0x07	; 7
    16f6:	88 0f       	add	r24, r24
    16f8:	89 2f       	mov	r24, r25
    16fa:	88 1f       	adc	r24, r24
    16fc:	99 0b       	sbc	r25, r25
    16fe:	91 95       	neg	r25
    1700:	80 6a       	ori	r24, 0xA0	; 160
    1702:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_writebyte>

	/* Check the action that make the flag is enabled is Sending device address with R/W bit*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1706:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    170a:	88 31       	cpi	r24, 0x18	; 24
    170c:	11 f0       	breq	.+4      	; 0x1712 <EEPROM_writeByte+0x46>
	    return ERROR;
    170e:	1c 82       	std	Y+4, r1	; 0x04
    1710:	16 c0       	rjmp	.+44     	; 0x173e <EEPROM_writeByte+0x72>

	/* Send the rest of Address that want to write on it in the EEPROM */
	TWI_writebyte((uint8)(u16addr));
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_writebyte>

	/* Check the action that make the flag is enabled is Sending address of location in memory*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    1718:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    171c:	88 32       	cpi	r24, 0x28	; 40
    171e:	11 f0       	breq	.+4      	; 0x1724 <EEPROM_writeByte+0x58>
		return ERROR;
    1720:	1c 82       	std	Y+4, r1	; 0x04
    1722:	0d c0       	rjmp	.+26     	; 0x173e <EEPROM_writeByte+0x72>

	/* write byte to EEPROM */
	TWI_writebyte(u8data);
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_writebyte>

	/* Check the action that make the flag is enabled is Sending The data that want to store in EEPROM */
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    172a:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    172e:	88 32       	cpi	r24, 0x28	; 40
    1730:	11 f0       	breq	.+4      	; 0x1736 <EEPROM_writeByte+0x6a>
		return ERROR;
    1732:	1c 82       	std	Y+4, r1	; 0x04
    1734:	04 c0       	rjmp	.+8      	; 0x173e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1736:	0e 94 ed 06 	call	0xdda	; 0xdda <TWI_stop>

    return SUCCESS;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	8c 83       	std	Y+4, r24	; 0x04
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <EEPROM_readByte+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <EEPROM_readByte+0x8>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	7c 83       	std	Y+4, r23	; 0x04
    1762:	6b 83       	std	Y+3, r22	; 0x03
	/* TWI send a start bit */
	TWI_start();
    1764:	0e 94 dd 06 	call	0xdba	; 0xdba <TWI_start>

	/* Check the action that make the flag is enabled is Sending a start bit*/
	if(TWI_getStatus() != TWI_START)
    1768:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	11 f0       	breq	.+4      	; 0x1774 <EEPROM_readByte+0x26>
		return ERROR;
    1770:	1d 82       	std	Y+5, r1	; 0x05
    1772:	44 c0       	rjmp	.+136    	; 0x17fc <EEPROM_readByte+0xae>

	/* Sending the address device of EEPROM 1010 is Fixed and first three bit is last three bits in 11-bit
	 * of the location that want to write a value on it in the EEPROM
	 * and specify R/W, In this case Write */
	TWI_writebyte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	80 70       	andi	r24, 0x00	; 0
    177a:	97 70       	andi	r25, 0x07	; 7
    177c:	88 0f       	add	r24, r24
    177e:	89 2f       	mov	r24, r25
    1780:	88 1f       	adc	r24, r24
    1782:	99 0b       	sbc	r25, r25
    1784:	91 95       	neg	r25
    1786:	80 6a       	ori	r24, 0xA0	; 160
    1788:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_writebyte>

	/* Check the action that make the flag is enabled is Sending device address with R/W bit*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    178c:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    1790:	88 31       	cpi	r24, 0x18	; 24
    1792:	11 f0       	breq	.+4      	; 0x1798 <EEPROM_readByte+0x4a>
	    return ERROR;
    1794:	1d 82       	std	Y+5, r1	; 0x05
    1796:	32 c0       	rjmp	.+100    	; 0x17fc <EEPROM_readByte+0xae>

	/* Send the rest of Address that want to write on it in the EEPROM */
	TWI_writebyte((uint8)(u16addr));
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_writebyte>

	/* Check the action that make the flag is enabled is Sending device address of location in memory*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    179e:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    17a2:	88 32       	cpi	r24, 0x28	; 40
    17a4:	11 f0       	breq	.+4      	; 0x17aa <EEPROM_readByte+0x5c>
		return ERROR;
    17a6:	1d 82       	std	Y+5, r1	; 0x05
    17a8:	29 c0       	rjmp	.+82     	; 0x17fc <EEPROM_readByte+0xae>

	/* Send the Repeated Start bit */
	TWI_start();
    17aa:	0e 94 dd 06 	call	0xdba	; 0xdba <TWI_start>

	/* Check the action that make the flag is enabled is Sending repeated start bit */
	if(TWI_getStatus() != TWI_REP_START)
    17ae:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    17b2:	80 31       	cpi	r24, 0x10	; 16
    17b4:	11 f0       	breq	.+4      	; 0x17ba <EEPROM_readByte+0x6c>
	    return ERROR;
    17b6:	1d 82       	std	Y+5, r1	; 0x05
    17b8:	21 c0       	rjmp	.+66     	; 0x17fc <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
	TWI_writebyte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	80 70       	andi	r24, 0x00	; 0
    17c0:	97 70       	andi	r25, 0x07	; 7
    17c2:	88 0f       	add	r24, r24
    17c4:	89 2f       	mov	r24, r25
    17c6:	88 1f       	adc	r24, r24
    17c8:	99 0b       	sbc	r25, r25
    17ca:	91 95       	neg	r25
    17cc:	81 6a       	ori	r24, 0xA1	; 161
    17ce:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <TWI_writebyte>

	/* Check the action that make the flag is enabled is reading acknowledge */
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    17d2:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    17d6:	80 34       	cpi	r24, 0x40	; 64
    17d8:	11 f0       	breq	.+4      	; 0x17de <EEPROM_readByte+0x90>
        return ERROR;
    17da:	1d 82       	std	Y+5, r1	; 0x05
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    17de:	0e 94 22 07 	call	0xe44	; 0xe44 <TWI_readByteWithNACK>
    17e2:	eb 81       	ldd	r30, Y+3	; 0x03
    17e4:	fc 81       	ldd	r31, Y+4	; 0x04
    17e6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    17e8:	0e 94 35 07 	call	0xe6a	; 0xe6a <TWI_getStatus>
    17ec:	88 35       	cpi	r24, 0x58	; 88
    17ee:	11 f0       	breq	.+4      	; 0x17f4 <EEPROM_readByte+0xa6>
        return ERROR;
    17f0:	1d 82       	std	Y+5, r1	; 0x05
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
        TWI_stop();
    17f4:	0e 94 ed 06 	call	0xdda	; 0xdda <TWI_stop>
    return SUCCESS;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <DCMotor_init>:
* [Function Name]: DCMotor_init
* [Description]: Initialize the direction of Motor
* [Argument]: No Arguments
* [Returns]: No Return Type
***************************************************/
void DCMotor_init(void){
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT); /* set PB0 as Output PIN */
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT); /* set PB1 as Output PIN*/
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <GPIO_setupPinDirection>

	/* initialize Direction of Motor to be Stopped */
	GPIO_writePin(PORTB_ID,PIN0_ID,LOGIC_Low);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_Low);
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	61 e0       	ldi	r22, 0x01	; 1
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_writePin>
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <DCMotor_rotate>:
*                2- send Duty cycle to PWM Driver based on value of Argument speed
* [Argument]: uint8 state ---> specify state of DcMotor (CW / A-CW / Stop)
*             uint8 speed ---> specify Speed of Motor(Send Duty cycle to PWM Driver)
* [Returns]: No Return Type
***************************************************/
void DCMotor_rotate(uint8 state, uint8 speed){
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <DCMotor_rotate+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	6a 83       	std	Y+2, r22	; 0x02
	PORTB = (PORTB & 0xFC) | (state & 0x03); // Set Direction of DCMotor (CW / A-CW / Stop) based on state argument //
    1852:	a8 e3       	ldi	r26, 0x38	; 56
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e8 e3       	ldi	r30, 0x38	; 56
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	98 2f       	mov	r25, r24
    185e:	9c 7f       	andi	r25, 0xFC	; 252
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	83 70       	andi	r24, 0x03	; 3
    1864:	89 2b       	or	r24, r25
    1866:	8c 93       	st	X, r24
	PWM_Timer0_Start(speed); // Set Duty cycle to PWM Driver Based on Speed Argument //
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	0e 94 34 0b 	call	0x1668	; 0x1668 <PWM_Timer0_Start>
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <Buzzer_init>:
*                 2- Turn OFF Buzzer Initially
* [Argument] : No arguments
* [Returns] : No return data type
**********************************************************************/
void Buzzer_init(void)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
	/* Set Direction of PIN Connected to Buzzer */
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_PIN_ID, PIN_OUTPUT);
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	62 e0       	ldi	r22, 0x02	; 2
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <GPIO_setupPinDirection>
	/*Turn OFF Buzzer initially*/
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_Low);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	62 e0       	ldi	r22, 0x02	; 2
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_writePin>
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <Buzzer_ON>:
* [Description] : Turn ON Buzzer
* [Argument] : No arguments
* [Returns] : No return data type
**********************************************************************/
void Buzzer_ON(void)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	/* Turn ON Buzzer */
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_High);
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_writePin>
}
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <Buzzer_OFF>:
* [Description] : Turn OFF Buzzer
* [Argument] : No arguments
* [Returns] : No return data type
**********************************************************************/
void Buzzer_OFF(void)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	/*Turn OFF Buzzer*/
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_Low);
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	62 e0       	ldi	r22, 0x02	; 2
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <GPIO_writePin>
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <main>:
#include "Control_Utilities.h"
#include "avr/io.h"
#include "util/delay.h"

int main(void)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	6f 97       	sbiw	r28, 0x1f	; 31
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61

	/* Enable Global interrupt Flag */
	SREG |= (1 << 7);
    18de:	af e5       	ldi	r26, 0x5F	; 95
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ef e5       	ldi	r30, 0x5F	; 95
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 68       	ori	r24, 0x80	; 128
    18ea:	8c 93       	st	X, r24

	/* Initialize DC_Motor Driver */
	DCMotor_init();
    18ec:	0e 94 07 0c 	call	0x180e	; 0x180e <DCMotor_init>
	 * - Number of Bits per Frame     : 8
	 * - Number of Stop bits in Frame : 1
	 * - Parity-bit in the Frame      : Disabled
	 * - Baud Rate of UART            : 9600
	 * ********************************************/
	UART_ConfigType Uart_configuration = {Data_8_bit , Stop_1Bit , Disabled , 9600};
    18f0:	ce 01       	movw	r24, r28
    18f2:	04 96       	adiw	r24, 0x04	; 4
    18f4:	9f 8b       	std	Y+23, r25	; 0x17
    18f6:	8e 8b       	std	Y+22, r24	; 0x16
    18f8:	ee e6       	ldi	r30, 0x6E	; 110
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	f9 8f       	std	Y+25, r31	; 0x19
    18fe:	e8 8f       	std	Y+24, r30	; 0x18
    1900:	f7 e0       	ldi	r31, 0x07	; 7
    1902:	fa 8f       	std	Y+26, r31	; 0x1a
    1904:	e8 8d       	ldd	r30, Y+24	; 0x18
    1906:	f9 8d       	ldd	r31, Y+25	; 0x19
    1908:	00 80       	ld	r0, Z
    190a:	88 8d       	ldd	r24, Y+24	; 0x18
    190c:	99 8d       	ldd	r25, Y+25	; 0x19
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	99 8f       	std	Y+25, r25	; 0x19
    1912:	88 8f       	std	Y+24, r24	; 0x18
    1914:	ee 89       	ldd	r30, Y+22	; 0x16
    1916:	ff 89       	ldd	r31, Y+23	; 0x17
    1918:	00 82       	st	Z, r0
    191a:	8e 89       	ldd	r24, Y+22	; 0x16
    191c:	9f 89       	ldd	r25, Y+23	; 0x17
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	9f 8b       	std	Y+23, r25	; 0x17
    1922:	8e 8b       	std	Y+22, r24	; 0x16
    1924:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1926:	91 50       	subi	r25, 0x01	; 1
    1928:	9a 8f       	std	Y+26, r25	; 0x1a
    192a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    192c:	ee 23       	and	r30, r30
    192e:	51 f7       	brne	.-44     	; 0x1904 <main+0x3a>
	UART_init(&Uart_configuration);
    1930:	ce 01       	movw	r24, r28
    1932:	04 96       	adiw	r24, 0x04	; 4
    1934:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	/* Initialize Buzzer Driver */
	Buzzer_init();
    1938:	0e 94 3c 0c 	call	0x1878	; 0x1878 <Buzzer_init>
	 * - Start Time       : 0
	 * - Compare value    : 8000
	 * - Pre-scaler       : 1024
	 * - Timer1 Mode      : Compare Mode
	 * ********************************************/
	TIMER1_setCallback(Callback);
    193c:	83 e2       	ldi	r24, 0x23	; 35
    193e:	9f e0       	ldi	r25, 0x0F	; 15
    1940:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TIMER1_setCallback>
	Timer1_ConfigType Timer1_configuration = {0,8000,F_CPU_1024,Compare_Mode};
    1944:	ce 01       	movw	r24, r28
    1946:	0b 96       	adiw	r24, 0x0b	; 11
    1948:	9c 8f       	std	Y+28, r25	; 0x1c
    194a:	8b 8f       	std	Y+27, r24	; 0x1b
    194c:	e8 e6       	ldi	r30, 0x68	; 104
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	fe 8f       	std	Y+30, r31	; 0x1e
    1952:	ed 8f       	std	Y+29, r30	; 0x1d
    1954:	f6 e0       	ldi	r31, 0x06	; 6
    1956:	ff 8f       	std	Y+31, r31	; 0x1f
    1958:	ed 8d       	ldd	r30, Y+29	; 0x1d
    195a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    195c:	00 80       	ld	r0, Z
    195e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1960:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	9e 8f       	std	Y+30, r25	; 0x1e
    1966:	8d 8f       	std	Y+29, r24	; 0x1d
    1968:	eb 8d       	ldd	r30, Y+27	; 0x1b
    196a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    196c:	00 82       	st	Z, r0
    196e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	9c 8f       	std	Y+28, r25	; 0x1c
    1976:	8b 8f       	std	Y+27, r24	; 0x1b
    1978:	9f 8d       	ldd	r25, Y+31	; 0x1f
    197a:	91 50       	subi	r25, 0x01	; 1
    197c:	9f 8f       	std	Y+31, r25	; 0x1f
    197e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1980:	ee 23       	and	r30, r30
    1982:	51 f7       	brne	.-44     	; 0x1958 <main+0x8e>
	TIMER1_init_Compare(&Timer1_configuration);
    1984:	ce 01       	movw	r24, r28
    1986:	0b 96       	adiw	r24, 0x0b	; 11
    1988:	0e 94 77 07 	call	0xeee	; 0xeee <TIMER1_init_Compare>

	/* Receive Two Passwords Entered by user and check the matching of two passwords of two password are matched
	 * this function will be terminated*/
	Check_Password();
    198c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Check_Password>

	/* Array of Length of password that will be used to store password entered by user */
	uint8 receiver_Password[Length_of_Password];

	/* Variable used to count number of wrong times that user entered a wrong passwords*/
	uint8 number_wrong_Password = 0;
    1990:	1b 82       	std	Y+3, r1	; 0x03

	/* Options variable that will receive what option that user will want to do */
	uint8 Options = 0;
    1992:	1a 82       	std	Y+2, r1	; 0x02

	/* state variable that store the state of two passwords entered by user*/
	uint8 state = 0;
    1994:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		/* control_ECU will be ready to receive message from HMI_ECU when HMI_ECU sends a Ready Message */
		if(UART_recieveByte() == Ready)
    1996:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    199a:	80 31       	cpi	r24, 0x10	; 16
    199c:	e1 f7       	brne	.-8      	; 0x1996 <main+0xcc>
		{
			/* Receive Password entered by user */
			Receive_From_User(receiver_Password);
    199e:	ce 01       	movw	r24, r28
    19a0:	41 96       	adiw	r24, 0x11	; 17
    19a2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Receive_From_User>

			/* Receive what option that user want to do */
			Options = UART_recieveByte();
    19a6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    19aa:	8a 83       	std	Y+2, r24	; 0x02

			/* check if Option entered is Open door option */
			if(Options == Open_Door)
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	8b 32       	cpi	r24, 0x2B	; 43
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <main+0xea>
    19b2:	5a c0       	rjmp	.+180    	; 0x1a68 <main+0x19e>
			{
				/* Compare password received with password stored in Application global variable */
				state = Compare_Password(receiver_Password,App_Password);
    19b4:	ce 01       	movw	r24, r28
    19b6:	41 96       	adiw	r24, 0x11	; 17
    19b8:	2c e7       	ldi	r18, 0x7C	; 124
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	b9 01       	movw	r22, r18
    19be:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Compare_Password>
    19c2:	89 83       	std	Y+1, r24	; 0x01

				/* If Two passwords are same */
				if(state == 1)
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	39 f4       	brne	.+14     	; 0x19d8 <main+0x10e>
				{
					/* Control_ECU sends a Open door action to receive it and display actions followed by the chosen
					 * action */
					UART_sendByte(Opening_Door_Action);
    19ca:	88 e5       	ldi	r24, 0x58	; 88
    19cc:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

					number_wrong_Password = 0;
    19d0:	1b 82       	std	Y+3, r1	; 0x03

					/* Rotate Motor for 15 seconds then hold motor for 3 second and then rotate A-CW for 15 seconds*/
					Rotate_hold_motor();
    19d2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Rotate_hold_motor>
    19d6:	df cf       	rjmp	.-66     	; 0x1996 <main+0xcc>
				}
				/* If password received doesn't equal password saved in EEPROM Module*/
				else if(state == 0)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 23       	and	r24, r24
    19dc:	e1 f6       	brne	.-72     	; 0x1996 <main+0xcc>
				{
					number_wrong_Password++;
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	8b 83       	std	Y+3, r24	; 0x03

					/* check every wrong entered password if number of entered wrong password reach to max or not*/
					if(number_wrong_Password == Max_Number_of_Wrong_Password)
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	83 30       	cpi	r24, 0x03	; 3
    19e8:	39 f4       	brne	.+14     	; 0x19f8 <main+0x12e>
					{
						/* If user entered 3 times wrong password Buzzer will be turn on for 60 seconds*/
						UART_sendByte(Danger);
    19ea:	83 e3       	ldi	r24, 0x33	; 51
    19ec:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

						Danger_Action();
    19f0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Danger_Action>

						/* Make this variable to be 0 again */
						number_wrong_Password = 0;
    19f4:	1b 82       	std	Y+3, r1	; 0x03
    19f6:	cf cf       	rjmp	.-98     	; 0x1996 <main+0xcc>
					}
					else
					{
						/* send to HMI_ECU that two passwords are not the same to ask him to enter password again*/
						UART_sendByte(0);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

						/* Receive the second entered password */
						Receive_From_User(receiver_Password);
    19fe:	ce 01       	movw	r24, r28
    1a00:	41 96       	adiw	r24, 0x11	; 17
    1a02:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Receive_From_User>

						/* Compare again with Password save in EEPROM Driver */
						state = Compare_Password(receiver_Password, App_Password);
    1a06:	ce 01       	movw	r24, r28
    1a08:	41 96       	adiw	r24, 0x11	; 17
    1a0a:	2c e7       	ldi	r18, 0x7C	; 124
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	b9 01       	movw	r22, r18
    1a10:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Compare_Password>
    1a14:	89 83       	std	Y+1, r24	; 0x01

						/* Send state of Two Passwords after comparing them */
						UART_sendByte(state);
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

						/* if two Password are same this time */
						if(state == 1)
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	19 f4       	brne	.+6      	; 0x1a28 <main+0x15e>
						{
							/* Rotate Motor for 15 seconds then hold motor for 3 second and then rotate A-CW for 15 seconds*/
							Rotate_hold_motor();
    1a22:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Rotate_hold_motor>
    1a26:	b7 cf       	rjmp	.-146    	; 0x1996 <main+0xcc>
						}
						/* If two password again are not same */
						else if(state == 0)
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <main+0x166>
    1a2e:	b3 cf       	rjmp	.-154    	; 0x1996 <main+0xcc>
						{

							/* Receive again the third Password from user */
							Receive_From_User(receiver_Password);
    1a30:	ce 01       	movw	r24, r28
    1a32:	41 96       	adiw	r24, 0x11	; 17
    1a34:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Receive_From_User>

							/* compare the two passwords for the third time */
							state = Compare_Password(receiver_Password, App_Password);
    1a38:	ce 01       	movw	r24, r28
    1a3a:	41 96       	adiw	r24, 0x11	; 17
    1a3c:	2c e7       	ldi	r18, 0x7C	; 124
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	b9 01       	movw	r22, r18
    1a42:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Compare_Password>
    1a46:	89 83       	std	Y+1, r24	; 0x01

							/* send to HIM_ECU the state of two Passwords */
							UART_sendByte(state);
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

							/* If two Passwords are matched */
							if(state == 1)
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	19 f4       	brne	.+6      	; 0x1a5a <main+0x190>
							{
								/* Rotate Motor for 15 seconds then hold motor for 3 second and then rotate A-CW for 15 seconds*/
								Rotate_hold_motor();
    1a54:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Rotate_hold_motor>
    1a58:	9e cf       	rjmp	.-196    	; 0x1996 <main+0xcc>
							}
							/* If Two passwords not matched for the third time */
							else if(state == 0)
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <main+0x198>
    1a60:	9a cf       	rjmp	.-204    	; 0x1996 <main+0xcc>
							{
								/* Enable buzzer module for 60 seconds */
								Danger_Action();
    1a62:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Danger_Action>
    1a66:	97 cf       	rjmp	.-210    	; 0x1996 <main+0xcc>
						}
					}
				}
			}
			/* If option send by HMI_ECU is chane_Password option */
			else if(Options == ChangePass)
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	8d 32       	cpi	r24, 0x2D	; 45
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <main+0x1a6>
    1a6e:	93 cf       	rjmp	.-218    	; 0x1996 <main+0xcc>
			{
				/* Compare Password received by user with password save in EEPROM Module */
				state = Compare_Password(receiver_Password,App_Password);
    1a70:	ce 01       	movw	r24, r28
    1a72:	41 96       	adiw	r24, 0x11	; 17
    1a74:	2c e7       	ldi	r18, 0x7C	; 124
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	b9 01       	movw	r22, r18
    1a7a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Compare_Password>
    1a7e:	89 83       	std	Y+1, r24	; 0x01

				/* IF the Two Password are the same */
				if(state == 1)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	39 f4       	brne	.+14     	; 0x1a94 <main+0x1ca>
				{

					/* send to HMI_ECU Changing_Passwrod_Action to show the following steps of this action */
					UART_sendByte(Changing_Password_Action);
    1a86:	8c e2       	ldi	r24, 0x2C	; 44
    1a88:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

					number_wrong_Password = 0;
    1a8c:	1b 82       	std	Y+3, r1	; 0x03

					/* Return to the step 1 (Enter and Re-enter two Passwords)*/
					Check_Password();
    1a8e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Check_Password>
    1a92:	81 cf       	rjmp	.-254    	; 0x1996 <main+0xcc>
				}
				/* if the two passwords are not the same */
				else if(state == 0)
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	88 23       	and	r24, r24
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <main+0x1d2>
    1a9a:	7d cf       	rjmp	.-262    	; 0x1996 <main+0xcc>
				{
					/* Increase variable first */
					number_wrong_Password++;
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	8b 83       	std	Y+3, r24	; 0x03

					/* check every wrong entered password if number of entered wrong password reach to max or not*/
					if(number_wrong_Password == Max_Number_of_Wrong_Password)
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	83 30       	cpi	r24, 0x03	; 3
    1aa6:	39 f4       	brne	.+14     	; 0x1ab6 <main+0x1ec>
					{
						/* Send a Danger message if two passwords are not same for third time */
						UART_sendByte(Danger);
    1aa8:	83 e3       	ldi	r24, 0x33	; 51
    1aaa:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

						/* Enable Buzzer for 60 seconds */
						Danger_Action();
    1aae:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Danger_Action>

						/* Make variable equal 0 again to count again */
						number_wrong_Password = 0;
    1ab2:	1b 82       	std	Y+3, r1	; 0x03
    1ab4:	70 cf       	rjmp	.-288    	; 0x1996 <main+0xcc>
					}
					else
					{
						/* Send Not matched state to HMI_ECU */
						UART_sendByte(0);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

						/* Receive from user for second time */
						Receive_From_User(receiver_Password);
    1abc:	ce 01       	movw	r24, r28
    1abe:	41 96       	adiw	r24, 0x11	; 17
    1ac0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Receive_From_User>

						/* compare between two Passwords */
						state = Compare_Password(receiver_Password, App_Password);
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	41 96       	adiw	r24, 0x11	; 17
    1ac8:	2c e7       	ldi	r18, 0x7C	; 124
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	b9 01       	movw	r22, r18
    1ace:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Compare_Password>
    1ad2:	89 83       	std	Y+1, r24	; 0x01

						/* send the state between two password to HMI_ECU */
						UART_sendByte(state);
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

						if(state == 1)
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	39 f4       	brne	.+14     	; 0x1aee <main+0x224>
						{
							/* send to HMI_ECU Changing_Passwrod_Action to show the following steps of this action */
							UART_sendByte(Changing_Password_Action);
    1ae0:	8c e2       	ldi	r24, 0x2C	; 44
    1ae2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

							number_wrong_Password = 0;
    1ae6:	1b 82       	std	Y+3, r1	; 0x03

							/* Return to the step 1 (Enter and Re-enter two Passwords)*/
							Check_Password();
    1ae8:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Check_Password>
    1aec:	54 cf       	rjmp	.-344    	; 0x1996 <main+0xcc>
						}
						else if(state == 0)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	88 23       	and	r24, r24
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <main+0x22c>
    1af4:	50 cf       	rjmp	.-352    	; 0x1996 <main+0xcc>
						{
							/* Receive password from user again */
							Receive_From_User(receiver_Password);
    1af6:	ce 01       	movw	r24, r28
    1af8:	41 96       	adiw	r24, 0x11	; 17
    1afa:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Receive_From_User>

							/* Compare Two Passwords aagain */
							state = Compare_Password(receiver_Password, App_Password);
    1afe:	ce 01       	movw	r24, r28
    1b00:	41 96       	adiw	r24, 0x11	; 17
    1b02:	2c e7       	ldi	r18, 0x7C	; 124
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	b9 01       	movw	r22, r18
    1b08:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Compare_Password>
    1b0c:	89 83       	std	Y+1, r24	; 0x01

							/* send the state of two passwords to user*/
							UART_sendByte(state);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>
							if(state == 1)
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	39 f4       	brne	.+14     	; 0x1b28 <main+0x25e>
							{
								/* send to HMI_ECU Changing_Passwrod_Action to show the following steps of this action */
								UART_sendByte(Changing_Password_Action);
    1b1a:	8c e2       	ldi	r24, 0x2C	; 44
    1b1c:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

								number_wrong_Password = 0;
    1b20:	1b 82       	std	Y+3, r1	; 0x03

								/* Return to the step 1 (Enter and Re-enter two Passwords)*/
								Check_Password();
    1b22:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Check_Password>
    1b26:	37 cf       	rjmp	.-402    	; 0x1996 <main+0xcc>
							}
							else if(state == 0)
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	88 23       	and	r24, r24
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <main+0x266>
    1b2e:	33 cf       	rjmp	.-410    	; 0x1996 <main+0xcc>
							{
								/* If password does't match for third time */
								Danger_Action();
    1b30:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <Danger_Action>
    1b34:	30 cf       	rjmp	.-416    	; 0x1996 <main+0xcc>

00001b36 <Compare_Password>:
* [Arguments]: - uint8* Password1 ---> First Password Entered
*              - uint8* Password2 ---> Second Password Entered
* [Returns]: Return state of Two Passwords
*****************************************************************************/
uint8 Compare_Password(uint8* Password1 , uint8* Password2)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <Compare_Password+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <Compare_Password+0x8>
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <Compare_Password+0xa>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9b 83       	std	Y+3, r25	; 0x03
    1b46:	8a 83       	std	Y+2, r24	; 0x02
    1b48:	7d 83       	std	Y+5, r23	; 0x05
    1b4a:	6c 83       	std	Y+4, r22	; 0x04
	/* Loop until Length of Password to Compare Two Passwrods*/
	for(uint8 i = 0 ; i < Length_of_Password ; ++i)
    1b4c:	19 82       	std	Y+1, r1	; 0x01
    1b4e:	19 c0       	rjmp	.+50     	; 0x1b82 <Compare_Password+0x4c>
	{
		/* Check if Two Password are equal */
		if(Password1[i] != Password2[i])
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	e2 0f       	add	r30, r18
    1b5e:	f3 1f       	adc	r31, r19
    1b60:	40 81       	ld	r20, Z
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	e2 0f       	add	r30, r18
    1b70:	f3 1f       	adc	r31, r19
    1b72:	80 81       	ld	r24, Z
    1b74:	48 17       	cp	r20, r24
    1b76:	11 f0       	breq	.+4      	; 0x1b7c <Compare_Password+0x46>
		{
			/* Return 0 if Not */
			return 0;
    1b78:	1e 82       	std	Y+6, r1	; 0x06
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <Compare_Password+0x56>
* [Returns]: Return state of Two Passwords
*****************************************************************************/
uint8 Compare_Password(uint8* Password1 , uint8* Password2)
{
	/* Loop until Length of Password to Compare Two Passwrods*/
	for(uint8 i = 0 ; i < Length_of_Password ; ++i)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	85 30       	cpi	r24, 0x05	; 5
    1b86:	20 f3       	brcs	.-56     	; 0x1b50 <Compare_Password+0x1a>
			/* Return 0 if Not */
			return 0;
		}
	}
	/* Return 1 if Matched */
	return 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	8e 83       	std	Y+6, r24	; 0x06
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1b8e:	26 96       	adiw	r28, 0x06	; 6
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <Receive_From_User>:
* [Description]: This Function Receive Password Entered by user serially using UART
* [Arguments]: uint8* Password that take Key Pressed by user and save it on this variable
* [Returns]: No Returns Type
*****************************************************************************/
void Receive_From_User(uint8* Password)
{
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	61 97       	sbiw	r28, 0x11	; 17
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	99 8b       	std	Y+17, r25	; 0x11
    1bba:	88 8b       	std	Y+16, r24	; 0x10
	/* Loop until Length of Password to store it in Variable Password */
	for(uint8 i = 0 ; i < Length_of_Password ; ++i)
    1bbc:	1f 86       	std	Y+15, r1	; 0x0f
    1bbe:	81 c0       	rjmp	.+258    	; 0x1cc2 <Receive_From_User+0x122>
	{
		/* Receive Serially using UART */
		Password[i] = UART_recieveByte();
    1bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	88 89       	ldd	r24, Y+16	; 0x10
    1bc8:	99 89       	ldd	r25, Y+17	; 0x11
    1bca:	8c 01       	movw	r16, r24
    1bcc:	02 0f       	add	r16, r18
    1bce:	13 1f       	adc	r17, r19
    1bd0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	80 83       	st	Z, r24
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a8 e4       	ldi	r26, 0x48	; 72
    1bde:	b2 e4       	ldi	r27, 0x42	; 66
    1be0:	8b 87       	std	Y+11, r24	; 0x0b
    1be2:	9c 87       	std	Y+12, r25	; 0x0c
    1be4:	ad 87       	std	Y+13, r26	; 0x0d
    1be6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a ef       	ldi	r20, 0xFA	; 250
    1bf6:	54 e4       	ldi	r21, 0x44	; 68
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8f 83       	std	Y+7, r24	; 0x07
    1c02:	98 87       	std	Y+8, r25	; 0x08
    1c04:	a9 87       	std	Y+9, r26	; 0x09
    1c06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c08:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0a:	78 85       	ldd	r23, Y+8	; 0x08
    1c0c:	89 85       	ldd	r24, Y+9	; 0x09
    1c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <Receive_From_User+0x8a>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <Receive_From_User+0x108>
	else if (__tmp > 65535)
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <Receive_From_User+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <Receive_From_User+0xea>
    1c6c:	88 ec       	ldi	r24, 0xC8	; 200
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9c 83       	std	Y+4, r25	; 0x04
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <Receive_From_User+0xd8>
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8d 81       	ldd	r24, Y+5	; 0x05
    1c82:	9e 81       	ldd	r25, Y+6	; 0x06
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <Receive_From_User+0xcc>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <Receive_From_User+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <Receive_From_User+0x114>
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	89 83       	std	Y+1, r24	; 0x01
* [Returns]: No Returns Type
*****************************************************************************/
void Receive_From_User(uint8* Password)
{
	/* Loop until Length of Password to store it in Variable Password */
	for(uint8 i = 0 ; i < Length_of_Password ; ++i)
    1cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbe:	8f 5f       	subi	r24, 0xFF	; 255
    1cc0:	8f 87       	std	Y+15, r24	; 0x0f
    1cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc4:	85 30       	cpi	r24, 0x05	; 5
    1cc6:	08 f4       	brcc	.+2      	; 0x1cca <Receive_From_User+0x12a>
    1cc8:	7b cf       	rjmp	.-266    	; 0x1bc0 <Receive_From_User+0x20>
		Password[i] = UART_recieveByte();

		/* Simple Delay between operations */
		_delay_ms(50);
	}
}
    1cca:	61 96       	adiw	r28, 0x11	; 17
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

00001ce0 <Store_Password_EEPROM>:
*                Password entered by user are matched
* [Arguments]: uint8* Password that take Key Pressed by user and save it on this global variable
* [Returns]: No Returns Type
*****************************************************************************/
void Store_Password_EEPROM(uint8* Password)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	61 97       	sbiw	r28, 0x11	; 17
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	99 8b       	std	Y+17, r25	; 0x11
    1cf6:	88 8b       	std	Y+16, r24	; 0x10
	/* Loop until Length of Password to store it in Variable App_Password */
	for(uint8 i = 0 ; i < Length_of_Password ; ++i)
    1cf8:	1f 86       	std	Y+15, r1	; 0x0f
    1cfa:	98 c0       	rjmp	.+304    	; 0x1e2c <Store_Password_EEPROM+0x14c>
	{
		/* Store Password in the specific location in EEPROM Memory */
		EEPROM_writeByte(EEPROM_Address + i, Password[i]);
    1cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	8f 5e       	subi	r24, 0xEF	; 239
    1d04:	9c 4f       	sbci	r25, 0xFC	; 252
    1d06:	ac 01       	movw	r20, r24
    1d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	88 89       	ldd	r24, Y+16	; 0x10
    1d10:	99 89       	ldd	r25, Y+17	; 0x11
    1d12:	fc 01       	movw	r30, r24
    1d14:	e2 0f       	add	r30, r18
    1d16:	f3 1f       	adc	r31, r19
    1d18:	20 81       	ld	r18, Z
    1d1a:	ca 01       	movw	r24, r20
    1d1c:	62 2f       	mov	r22, r18
    1d1e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <EEPROM_writeByte>

		/* This is global variable that will be compared in Main.c File */
		App_Password[i] = Password[i];
    1d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d24:	48 2f       	mov	r20, r24
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	88 89       	ldd	r24, Y+16	; 0x10
    1d30:	99 89       	ldd	r25, Y+17	; 0x11
    1d32:	fc 01       	movw	r30, r24
    1d34:	e2 0f       	add	r30, r18
    1d36:	f3 1f       	adc	r31, r19
    1d38:	80 81       	ld	r24, Z
    1d3a:	fa 01       	movw	r30, r20
    1d3c:	e4 58       	subi	r30, 0x84	; 132
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 83       	st	Z, r24
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a8 e4       	ldi	r26, 0x48	; 72
    1d48:	b2 e4       	ldi	r27, 0x42	; 66
    1d4a:	8b 87       	std	Y+11, r24	; 0x0b
    1d4c:	9c 87       	std	Y+12, r25	; 0x0c
    1d4e:	ad 87       	std	Y+13, r26	; 0x0d
    1d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a ef       	ldi	r20, 0xFA	; 250
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8f 83       	std	Y+7, r24	; 0x07
    1d6c:	98 87       	std	Y+8, r25	; 0x08
    1d6e:	a9 87       	std	Y+9, r26	; 0x09
    1d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <Store_Password_EEPROM+0xb4>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <Store_Password_EEPROM+0x132>
	else if (__tmp > 65535)
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <Store_Password_EEPROM+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <Store_Password_EEPROM+0x114>
    1dd6:	88 ec       	ldi	r24, 0xC8	; 200
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 83       	std	Y+4, r25	; 0x04
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <Store_Password_EEPROM+0x102>
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <Store_Password_EEPROM+0xf6>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <Store_Password_EEPROM+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <Store_Password_EEPROM+0x13e>
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
* [Returns]: No Returns Type
*****************************************************************************/
void Store_Password_EEPROM(uint8* Password)
{
	/* Loop until Length of Password to store it in Variable App_Password */
	for(uint8 i = 0 ; i < Length_of_Password ; ++i)
    1e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e28:	8f 5f       	subi	r24, 0xFF	; 255
    1e2a:	8f 87       	std	Y+15, r24	; 0x0f
    1e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2e:	85 30       	cpi	r24, 0x05	; 5
    1e30:	08 f4       	brcc	.+2      	; 0x1e34 <Store_Password_EEPROM+0x154>
    1e32:	64 cf       	rjmp	.-312    	; 0x1cfc <Store_Password_EEPROM+0x1c>
		App_Password[i] = Password[i];

		/* Simple Delay between operations */
		_delay_ms(50);
	}
}
    1e34:	61 96       	adiw	r28, 0x11	; 17
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <Callback>:
* [Description]: This Function increase only global variable that used by ISR in Timer1 Module
* [Arguments]: No Arguments
* [Returns]: No Returns Type
*****************************************************************************/
void Callback(void)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	g_ticks ++;
    1e4e:	80 91 78 00 	lds	r24, 0x0078
    1e52:	90 91 79 00 	lds	r25, 0x0079
    1e56:	a0 91 7a 00 	lds	r26, 0x007A
    1e5a:	b0 91 7b 00 	lds	r27, 0x007B
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	a1 1d       	adc	r26, r1
    1e62:	b1 1d       	adc	r27, r1
    1e64:	80 93 78 00 	sts	0x0078, r24
    1e68:	90 93 79 00 	sts	0x0079, r25
    1e6c:	a0 93 7a 00 	sts	0x007A, r26
    1e70:	b0 93 7b 00 	sts	0x007B, r27
}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <Check_Password>:
*                based on Password correct or Not
* [Arguments]: uint8* Password that take Key Pressed by user and save it on this variable
* [Returns]: No Returns Type
*****************************************************************************/
void Check_Password(void)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	2b 97       	sbiw	r28, 0x0b	; 11
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
	/* Create Two arrays of Length of Password that will be received from HMI_ECU */
	uint8 Password1[Length_of_Password];
	uint8 Password2[Length_of_Password];

	/* variable that will save the state of Two passwords entered */
	uint8 status = 0;
    1e8e:	19 82       	std	Y+1, r1	; 0x01
    1e90:	2c c0       	rjmp	.+88     	; 0x1eea <Check_Password+0x70>
	/* When The state of Two password Unmatched, wait until user Entered another two passwords */
	while(status == 0)
	{

		/* Wait until HMI_ECU Entered a Password, Before entered a Password HMI_ECU will send Ready byte */
		while(UART_recieveByte() != Ready){}
    1e92:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    1e96:	80 31       	cpi	r24, 0x10	; 16
    1e98:	e1 f7       	brne	.-8      	; 0x1e92 <Check_Password+0x18>

		/* Tell HMI_ECU that Ready to Receive Passwords */
		UART_sendByte(Ready);
    1e9a:	80 e1       	ldi	r24, 0x10	; 16
    1e9c:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

		/* Receive Password Entered by user and store it in the First array */
		Receive_From_User(Password1);
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	02 96       	adiw	r24, 0x02	; 2
    1ea4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Receive_From_User>

		/* Wait until HMI_ECU Entered a Password, Before entered a Password HMI_ECU will send Ready byte */
		while(UART_recieveByte()!=Ready){}
    1ea8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <UART_recieveByte>
    1eac:	80 31       	cpi	r24, 0x10	; 16
    1eae:	e1 f7       	brne	.-8      	; 0x1ea8 <Check_Password+0x2e>

		/* Tell HMI_ECU that Ready to Receive Passwords */
		UART_sendByte(Ready);
    1eb0:	80 e1       	ldi	r24, 0x10	; 16
    1eb2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

		/* Receive Password Entered by user and store it in the Second array */
		Receive_From_User(Password2);
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	07 96       	adiw	r24, 0x07	; 7
    1eba:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Receive_From_User>

		/* Compare between two Password using Compare_Passwords Fucntion */
		status = Compare_Password(Password1, Password2);
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	02 96       	adiw	r24, 0x02	; 2
    1ec2:	9e 01       	movw	r18, r28
    1ec4:	29 5f       	subi	r18, 0xF9	; 249
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	b9 01       	movw	r22, r18
    1eca:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Compare_Password>
    1ece:	89 83       	std	Y+1, r24	; 0x01

		/* Tell HMI_ECU that Control_ECU will send a byte */
		UART_sendByte(Ready);
    1ed0:	80 e1       	ldi	r24, 0x10	; 16
    1ed2:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

		/* Send the state of Two passwords to HMI_ECU */
		UART_sendByte(status);
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	0e 94 28 06 	call	0xc50	; 0xc50 <UART_sendByte>

		/* If two Passwords Matched then save password into EEPROM */
		if(status == 1)
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	21 f4       	brne	.+8      	; 0x1eea <Check_Password+0x70>
		{
			/*save password into EEPROM*/
			Store_Password_EEPROM(Password1);
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	02 96       	adiw	r24, 0x02	; 2
    1ee6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <Store_Password_EEPROM>

	/* variable that will save the state of Two passwords entered */
	uint8 status = 0;

	/* When The state of Two password Unmatched, wait until user Entered another two passwords */
	while(status == 0)
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	88 23       	and	r24, r24
    1eee:	89 f2       	breq	.-94     	; 0x1e92 <Check_Password+0x18>
		{
			/*save password into EEPROM*/
			Store_Password_EEPROM(Password1);
		}
	}
}
    1ef0:	2b 96       	adiw	r28, 0x0b	; 11
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <Danger_Action>:
* [Description]: This Function Turn on Buzzer after entering 3 wrong Password Repeatedly
* [Arguments]: No Arguments
* [Returns]: No Returns Type
*****************************************************************************/
void Danger_Action(void)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	g_ticks = 0;
    1f0a:	10 92 78 00 	sts	0x0078, r1
    1f0e:	10 92 79 00 	sts	0x0079, r1
    1f12:	10 92 7a 00 	sts	0x007A, r1
    1f16:	10 92 7b 00 	sts	0x007B, r1

	/* Turn on Buzzer when user Entered 3 wrong password repeatedly in Open door or change Password options */
	Buzzer_ON();
    1f1a:	0e 94 4d 0c 	call	0x189a	; 0x189a <Buzzer_ON>

	/* Buzzer will be operated until Timer count 60 seconds */
	while(g_ticks < Danger_Time){}
    1f1e:	80 91 78 00 	lds	r24, 0x0078
    1f22:	90 91 79 00 	lds	r25, 0x0079
    1f26:	a0 91 7a 00 	lds	r26, 0x007A
    1f2a:	b0 91 7b 00 	lds	r27, 0x007B
    1f2e:	8c 33       	cpi	r24, 0x3C	; 60
    1f30:	91 05       	cpc	r25, r1
    1f32:	a1 05       	cpc	r26, r1
    1f34:	b1 05       	cpc	r27, r1
    1f36:	98 f3       	brcs	.-26     	; 0x1f1e <Danger_Action+0x1c>

	/* After Timer1 Finishing counts, Buzzer will Turn off */
	Buzzer_OFF();
    1f38:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <Buzzer_OFF>
}
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <Rotate_hold_motor>:
*                again
* [Arguments]: No arguments
* [Returns]: No Returns Type
*****************************************************************************/
void Rotate_hold_motor(void)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
	g_ticks = 0;
    1f4a:	10 92 78 00 	sts	0x0078, r1
    1f4e:	10 92 79 00 	sts	0x0079, r1
    1f52:	10 92 7a 00 	sts	0x007A, r1
    1f56:	10 92 7b 00 	sts	0x007B, r1

	/* Rotate Motor with clockwise when user Entered a correct Password */
	DCMotor_rotate(1, 95);
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	6f e5       	ldi	r22, 0x5F	; 95
    1f5e:	0e 94 22 0c 	call	0x1844	; 0x1844 <DCMotor_rotate>

	/* Wait until 15 seconds when Door is Completely opened */
	while(g_ticks < Open_Time){};
    1f62:	80 91 78 00 	lds	r24, 0x0078
    1f66:	90 91 79 00 	lds	r25, 0x0079
    1f6a:	a0 91 7a 00 	lds	r26, 0x007A
    1f6e:	b0 91 7b 00 	lds	r27, 0x007B
    1f72:	8a 30       	cpi	r24, 0x0A	; 10
    1f74:	91 05       	cpc	r25, r1
    1f76:	a1 05       	cpc	r26, r1
    1f78:	b1 05       	cpc	r27, r1
    1f7a:	98 f3       	brcs	.-26     	; 0x1f62 <Rotate_hold_motor+0x20>

	/* Hold the Door for 3 seconds */
	DCMotor_rotate(0, 0);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	0e 94 22 0c 	call	0x1844	; 0x1844 <DCMotor_rotate>

	/* Wait until 3 seconds */
	while(g_ticks < Open_Time + Hold_Time){};
    1f84:	80 91 78 00 	lds	r24, 0x0078
    1f88:	90 91 79 00 	lds	r25, 0x0079
    1f8c:	a0 91 7a 00 	lds	r26, 0x007A
    1f90:	b0 91 7b 00 	lds	r27, 0x007B
    1f94:	8d 30       	cpi	r24, 0x0D	; 13
    1f96:	91 05       	cpc	r25, r1
    1f98:	a1 05       	cpc	r26, r1
    1f9a:	b1 05       	cpc	r27, r1
    1f9c:	98 f3       	brcs	.-26     	; 0x1f84 <Rotate_hold_motor+0x42>

	/* Rotate Motor with Anti-clockwise to Close Door Again */
	DCMotor_rotate(2, 95);
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	6f e5       	ldi	r22, 0x5F	; 95
    1fa2:	0e 94 22 0c 	call	0x1844	; 0x1844 <DCMotor_rotate>

	/* Wait until 15 seconds when Door is Completely closed */
	while(g_ticks < Open_Time + Hold_Time + Close_Time){}
    1fa6:	80 91 78 00 	lds	r24, 0x0078
    1faa:	90 91 79 00 	lds	r25, 0x0079
    1fae:	a0 91 7a 00 	lds	r26, 0x007A
    1fb2:	b0 91 7b 00 	lds	r27, 0x007B
    1fb6:	87 31       	cpi	r24, 0x17	; 23
    1fb8:	91 05       	cpc	r25, r1
    1fba:	a1 05       	cpc	r26, r1
    1fbc:	b1 05       	cpc	r27, r1
    1fbe:	98 f3       	brcs	.-26     	; 0x1fa6 <Rotate_hold_motor+0x64>

	/* Stop Motor */
	DCMotor_rotate(0, 0);
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	0e 94 22 0c 	call	0x1844	; 0x1844 <DCMotor_rotate>
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <__divmodhi4>:
    1fce:	97 fb       	bst	r25, 7
    1fd0:	09 2e       	mov	r0, r25
    1fd2:	07 26       	eor	r0, r23
    1fd4:	0a d0       	rcall	.+20     	; 0x1fea <__divmodhi4_neg1>
    1fd6:	77 fd       	sbrc	r23, 7
    1fd8:	04 d0       	rcall	.+8      	; 0x1fe2 <__divmodhi4_neg2>
    1fda:	2e d0       	rcall	.+92     	; 0x2038 <__udivmodhi4>
    1fdc:	06 d0       	rcall	.+12     	; 0x1fea <__divmodhi4_neg1>
    1fde:	00 20       	and	r0, r0
    1fe0:	1a f4       	brpl	.+6      	; 0x1fe8 <__divmodhi4_exit>

00001fe2 <__divmodhi4_neg2>:
    1fe2:	70 95       	com	r23
    1fe4:	61 95       	neg	r22
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255

00001fe8 <__divmodhi4_exit>:
    1fe8:	08 95       	ret

00001fea <__divmodhi4_neg1>:
    1fea:	f6 f7       	brtc	.-4      	; 0x1fe8 <__divmodhi4_exit>
    1fec:	90 95       	com	r25
    1fee:	81 95       	neg	r24
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	08 95       	ret

00001ff4 <__udivmodsi4>:
    1ff4:	a1 e2       	ldi	r26, 0x21	; 33
    1ff6:	1a 2e       	mov	r1, r26
    1ff8:	aa 1b       	sub	r26, r26
    1ffa:	bb 1b       	sub	r27, r27
    1ffc:	fd 01       	movw	r30, r26
    1ffe:	0d c0       	rjmp	.+26     	; 0x201a <__udivmodsi4_ep>

00002000 <__udivmodsi4_loop>:
    2000:	aa 1f       	adc	r26, r26
    2002:	bb 1f       	adc	r27, r27
    2004:	ee 1f       	adc	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	a2 17       	cp	r26, r18
    200a:	b3 07       	cpc	r27, r19
    200c:	e4 07       	cpc	r30, r20
    200e:	f5 07       	cpc	r31, r21
    2010:	20 f0       	brcs	.+8      	; 0x201a <__udivmodsi4_ep>
    2012:	a2 1b       	sub	r26, r18
    2014:	b3 0b       	sbc	r27, r19
    2016:	e4 0b       	sbc	r30, r20
    2018:	f5 0b       	sbc	r31, r21

0000201a <__udivmodsi4_ep>:
    201a:	66 1f       	adc	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	1a 94       	dec	r1
    2024:	69 f7       	brne	.-38     	; 0x2000 <__udivmodsi4_loop>
    2026:	60 95       	com	r22
    2028:	70 95       	com	r23
    202a:	80 95       	com	r24
    202c:	90 95       	com	r25
    202e:	9b 01       	movw	r18, r22
    2030:	ac 01       	movw	r20, r24
    2032:	bd 01       	movw	r22, r26
    2034:	cf 01       	movw	r24, r30
    2036:	08 95       	ret

00002038 <__udivmodhi4>:
    2038:	aa 1b       	sub	r26, r26
    203a:	bb 1b       	sub	r27, r27
    203c:	51 e1       	ldi	r21, 0x11	; 17
    203e:	07 c0       	rjmp	.+14     	; 0x204e <__udivmodhi4_ep>

00002040 <__udivmodhi4_loop>:
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	a6 17       	cp	r26, r22
    2046:	b7 07       	cpc	r27, r23
    2048:	10 f0       	brcs	.+4      	; 0x204e <__udivmodhi4_ep>
    204a:	a6 1b       	sub	r26, r22
    204c:	b7 0b       	sbc	r27, r23

0000204e <__udivmodhi4_ep>:
    204e:	88 1f       	adc	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	5a 95       	dec	r21
    2054:	a9 f7       	brne	.-22     	; 0x2040 <__udivmodhi4_loop>
    2056:	80 95       	com	r24
    2058:	90 95       	com	r25
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	08 95       	ret

00002060 <__prologue_saves__>:
    2060:	2f 92       	push	r2
    2062:	3f 92       	push	r3
    2064:	4f 92       	push	r4
    2066:	5f 92       	push	r5
    2068:	6f 92       	push	r6
    206a:	7f 92       	push	r7
    206c:	8f 92       	push	r8
    206e:	9f 92       	push	r9
    2070:	af 92       	push	r10
    2072:	bf 92       	push	r11
    2074:	cf 92       	push	r12
    2076:	df 92       	push	r13
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	ca 1b       	sub	r28, r26
    208a:	db 0b       	sbc	r29, r27
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	09 94       	ijmp

00002098 <__epilogue_restores__>:
    2098:	2a 88       	ldd	r2, Y+18	; 0x12
    209a:	39 88       	ldd	r3, Y+17	; 0x11
    209c:	48 88       	ldd	r4, Y+16	; 0x10
    209e:	5f 84       	ldd	r5, Y+15	; 0x0f
    20a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    20a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    20a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    20a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    20a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    20aa:	b9 84       	ldd	r11, Y+9	; 0x09
    20ac:	c8 84       	ldd	r12, Y+8	; 0x08
    20ae:	df 80       	ldd	r13, Y+7	; 0x07
    20b0:	ee 80       	ldd	r14, Y+6	; 0x06
    20b2:	fd 80       	ldd	r15, Y+5	; 0x05
    20b4:	0c 81       	ldd	r16, Y+4	; 0x04
    20b6:	1b 81       	ldd	r17, Y+3	; 0x03
    20b8:	aa 81       	ldd	r26, Y+2	; 0x02
    20ba:	b9 81       	ldd	r27, Y+1	; 0x01
    20bc:	ce 0f       	add	r28, r30
    20be:	d1 1d       	adc	r29, r1
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	ed 01       	movw	r28, r26
    20cc:	08 95       	ret

000020ce <_exit>:
    20ce:	f8 94       	cli

000020d0 <__stop_program>:
    20d0:	ff cf       	rjmp	.-2      	; 0x20d0 <__stop_program>
